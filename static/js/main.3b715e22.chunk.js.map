{"version":3,"sources":["components/content/addMessageForm/addMessageForm.tsx","redux/dialogs-reducer.ts","api/api.ts","components/header/drawerComponent.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/login/login.tsx","components/login/loginContainer.tsx","components/header/header.tsx","components/header/headerContainer.tsx","redux/app-reducer.ts","components/content/common/preloader/preloader.tsx","assets/images/welcome-home-welcome-home-de.jpg","components/content/welcome/welcome.tsx","components/content/notFound/notFound.tsx","components/content/errorBoundary/errorBoundary.tsx","components/content/profile/profileInfo/profileStatus.tsx","components/content/profile/profileInfo/profileDataForm.tsx","components/content/profile/profileInfo/profileInfo.tsx","api/profile-api.ts","redux/profile-reducer.ts","components/content/profile/myPosts/posts/post.tsx","components/content/profile/myPosts/myPosts.tsx","components/content/profile/myPosts/myPostsContainer.tsx","components/content/profile/profile.tsx","components/content/profile/profileContainer.tsx","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","components/content/common/paginator/paginator.tsx","components/content/users/user.tsx","components/content/users/usersSearchForm.tsx","components/content/users/users.tsx","components/content/users/usersSelectors.ts","components/content/users/usersContainer.tsx","components/app/app.tsx","hoc/withSuspense.tsx","redux/redux-store.ts","index.tsx","assets/images/avatar.svg"],"names":["AddMessageForm","sendMessage","maxLength","useForm","register","handleSubmit","errors","formState","onSubmit","data","newMessageBody","placeholder","required","value","message","type","AddMessageFormik","initialValues","input","values","submitForm","isSubmitting","component","TextField","name","label","helperText","style","width","display","justifyContent","onClick","disabled","initialState","dataDialog","id","img","avatar","messages","dialogsReducer","state","action","body","dialogsActions","ResultCodesEnum","ResultCodeForCaptcha","useStyles","makeStyles","theme","drawer","drawerWidth","flexShrink","whiteSpace","drawerOpen","transition","transitions","create","easing","sharp","duration","enteringScreen","drawerClose","leavingScreen","overflowX","spacing","toolbar","alignItems","padding","mixins","DrawerComponent","handleDrawerClose","open","useTheme","classes","history","useHistory","Drawer","variant","className","clsx","paper","IconButton","direction","Divider","List","ListItem","button","push","ListItemIcon","ListItemText","primary","instance","axios","withCredentials","baseURL","headers","authAPI","get","then","response","email","password","rememberMe","captcha","post","res","delete","securityAPI","userId","login","isAuth","errorMessage","captchaUrl","undefined","actions","payload","getAuthUserData","dispatch","a","meData","resultCode","Success","getCaptchaUrl","url","Login","useState","setOpen","handleClose","Button","color","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","Typography","validate","test","Box","margin","FormControlLabel","control","Switch","src","alt","backgroundColor","DialogActions","mapDispatchToProps","loginData","CaptchaIsRequired","connect","auth","root","appBar","zIndex","menuButton","marginRight","hide","title","marginLeft","cursor","empty","flexGrow","Header","logout","darkMode","setDarkMode","AppBar","position","Toolbar","edge","noWrap","initialized","Preloader","LinearProgress","marginBottom","height","Welcome","welcome","NotFound","ErrorBoundary","error","errorInfo","this","setState","console","log","props","children","React","Component","ProfileStatus","profile","status","updateUserStatus","isOwner","editMode","setEditMode","localStatus","setLocalStatus","useEffect","onChange","e","currentTarget","autoFocus","onBlur","defaultValue","onDoubleClick","ProfileDataForm","saveProfile","setErrors","defaultValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","catch","reject","map","elem","Object","keys","key","ProfileInfo","savePhoto","photos","large","goToEditMode","target","files","length","ProfileData","contactTitle","contactValue","Contact","profileAPI","put","photoFile","formData","FormData","append","posts","likesCount","newPostText","addPost","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","getUserProfile","info","marginTop","content","flexDirection","borderRadius","Post","Card","CardContent","align","MyPosts","profilePage","Profile","Grid","container","item","Paper","getUserStatus","file","getState","Error","Promise","authorizedUserId","useParams","updateObjectInArray","items","itemId","objPropName","newObjProps","i","usersAPI","currentPage","pageSize","term","friend","users","totalUsersCount","isFetching","followingInProgress","filter","_followUnfollowFlow","apiMethod","actionCreator","Paginator","totalItemsCount","onPageChanged","portionSize","portionNumber","setPortionNumber","pagesCount","Math","ceil","pages","Array","from","_","k","portionCount","leftPortionPageNumber","rightPortionPageNumber","p","media","User","user","follow","unfollow","CardActionArea","NavLink","to","CardMedia","image","gutterBottom","CardActions","followed","fullWidth","size","some","select","search","shape","fade","palette","common","white","breakpoints","up","searchIcon","pointerEvents","inputRoot","inputInput","paddingLeft","usersSearchFormValidate","UsersSearchForm","onFilterChanged","setSubmitting","handleChange","touched","handleBlur","InputBase","inputProps","Select","MenuItem","useStyle","flexWrap","cards","Users","memo","index","getUsersSelector","createSelector","usersPage","getUsersThunkCreator","page","totalCount","WrappedComponent","SuspendedDialogs","lazy","Suspense","fallback","initializeApp","app","createMuiTheme","main","secondary","preloader","ThemeProvider","CssBaseline","path","exact","ProfileContainer","UsersContainer","rootReducer","combineReducers","newPost","dialogsPage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.3b715e22.chunk.js","sourcesContent":["import {useForm} from \"react-hook-form\";\r\nimport {Form, Formik, Field} from \"formik\";\r\nimport {Box, Button} from \"@material-ui/core\";\r\nimport {TextField} from \"formik-material-ui\";\r\nimport {FC} from \"react\";\r\n\r\ntype AddMessageFormPropsType = {\r\n    sendMessage: (text: string) => void\r\n    maxLength: number\r\n}\r\n\r\nexport const AddMessageForm: FC<AddMessageFormPropsType> = ({sendMessage, maxLength}) => {\r\n    const {register, handleSubmit, formState: {errors}} = useForm();\r\n\r\n    const onSubmit = (data: { newMessageBody: string }) => {\r\n        sendMessage(data.newMessageBody);\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div>\r\n                <div>\r\n                <textarea placeholder={\"Enter your message\"}\r\n                          {...register(\"newMessageBody\", ({\r\n                              required: \"Field is required\",\r\n                              maxLength: {value: maxLength, message: `Max length is ${maxLength} symbols`}\r\n                          }))}/>\r\n                </div>\r\n                {errors.newMessageBody && <span>{errors.newMessageBody.message}</span>}\r\n                <input type=\"submit\" value={\"Send\"}/>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\ntype AddMessageFormikPropsType = {\r\n    sendMessage: (text: string) => void\r\n}\r\n\r\nexport const AddMessageFormik: FC<AddMessageFormikPropsType> = ({sendMessage}) => {\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{input: \"\"}}\r\n            onSubmit={(values => sendMessage(values.input))}\r\n        >\r\n            {({submitForm, isSubmitting}) => (\r\n                <Form>\r\n                    <Box>\r\n                        <Field component={TextField} name={\"input\"} label={\"Add new post\"}\r\n                               helperText={\"Enter your message\"} style={{width: 250}}>\r\n                        </Field>\r\n                        <Box style={{display: \"flex\", justifyContent: \"flex-end\"}}>\r\n                            <Button onClick={submitForm} disabled={isSubmitting}>\r\n                                Send\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};","import avatar from \"../assets/images/avatar.svg\"\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    dataDialog: [\r\n        {id: 1, name: \"Dimych\", img: avatar},\r\n        {id: 2, name: \"Andrey\", img: avatar},\r\n        {id: 3, name: \"Sveta\", img: avatar},\r\n        {id: 4, name: \"Sasha\", img: avatar},\r\n        {id: 5, name: \"Victor\", img: avatar},\r\n        {id: 6, name: \"Valera\", img: avatar},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"},\r\n    ],\r\n};\r\n\r\nexport const dialogsReducer = (state = initialState, action: DialogsActionsTypes): DialogsInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SEND_MESSAGE\":\r\n            const body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}],\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport type DialogsActionsTypes = InferActionsTypes<typeof dialogsActions>\r\n\r\nexport const dialogsActions = {\r\n    sendMessage: (newMessageBody: string) => ({type: \"SEND_MESSAGE\", newMessageBody} as const)\r\n}","import axios from \"axios\";\r\nimport {UserType} from \"../types/typs\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"b45f20e6-c418-486d-bf45-21bf8191b135\"\r\n    },\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: UserType[]\r\n    totalCount: number\r\n    error?: string\r\n}\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: string[]\r\n    resultCode: RC\r\n}","import clsx from \"clsx\";\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {Drawer, List, Divider, ListItem, ListItemIcon, ListItemText, IconButton} from \"@material-ui/core\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport {drawerWidth} from \"./header\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport {FC} from \"react\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        whiteSpace: \"nowrap\",\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create(\"width\", {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerClose: {\r\n        transition: theme.transitions.create(\"width\", {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        overflowX: \"hidden\",\r\n        width: theme.spacing(7) + 1,\r\n    },\r\n    toolbar: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-end\",\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n    },\r\n}));\r\n\r\ntype DrawerComponentPropsType = {\r\n    handleDrawerClose: () => void\r\n    open: boolean\r\n}\r\n\r\nexport const DrawerComponent: FC<DrawerComponentPropsType> = ({handleDrawerClose, open}) => {\r\n    const theme = useTheme();\r\n    const classes = useStyles(theme);\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Drawer\r\n            variant=\"permanent\"\r\n            className={clsx(classes.drawer, {\r\n                [classes.drawerOpen]: open,\r\n                [classes.drawerClose]: !open,\r\n            })}\r\n            classes={{\r\n                paper: clsx({\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                }),\r\n            }}\r\n        >\r\n            <div className={classes.toolbar}>\r\n                <IconButton onClick={handleDrawerClose}>\r\n                    {theme.direction === \"rtl\" ? <ChevronRightIcon/> : <ChevronLeftIcon/>}\r\n                </IconButton>\r\n            </div>\r\n            <Divider/>\r\n            <List>\r\n                <ListItem button onClick={() => history.push(\"/profile\")}>\r\n                    <ListItemIcon><AccountBoxIcon/></ListItemIcon>\r\n                    <ListItemText primary={\"Profile\"}/>\r\n                </ListItem>\r\n                <ListItem button onClick={() => history.push(\"/dialogs\")}>\r\n                    <ListItemIcon><QuestionAnswerIcon/></ListItemIcon>\r\n                    <ListItemText primary={\"Dialogs\"}/>\r\n                </ListItem>\r\n                <ListItem button onClick={() => history.push(\"/users\")}>\r\n                    <ListItemIcon><GroupIcon/></ListItemIcon>\r\n                    <ListItemText primary={\"Users\"}/>\r\n                </ListItem>\r\n            </List>\r\n        </Drawer>\r\n    );\r\n};","import {instance, APIResponseType, ResultCodeForCaptcha, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(response => response.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha?: string) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptcha>>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n};","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n    }\r\n}","import {ResultCodeForCaptcha, ResultCodesEnum} from \"../api/api\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    errorMessage: null as string | null,\r\n    captchaUrl: undefined as string | undefined, // if null, then captcha is not required\r\n};\r\n\r\nexport const authReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n        case \"GET_CAPTCHA_URL_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n\r\n        case \"SET_ERROR_LOGIN\":\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: \"SET_USER_DATA\", payload: {userId, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({type: \"GET_CAPTCHA_URL_SUCCESS\", payload: {captchaUrl}} as const),\r\n    setErrorLogin: (errorMessage: string) => ({type: \"SET_ERROR_LOGIN\", errorMessage} as const),\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    const meData = await authAPI.me();\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        const {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha?: string): ThunkType => async (dispatch) => {\r\n    authAPI.login(email, password, rememberMe, captcha)\r\n        .then(loginData => {\r\n                if (loginData.resultCode === ResultCodesEnum.Success) {\r\n                    // success, get auth data\r\n                    dispatch(getAuthUserData());\r\n                } else {\r\n                    if (loginData.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n                        dispatch(getCaptchaUrl());\r\n                    }\r\n                    dispatch(actions.setErrorLogin(loginData.messages[0]));\r\n                }\r\n            }\r\n        )\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    const response = await authAPI.logout();\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n};","import {\r\n    Button, Dialog, DialogActions, Box, FormControlLabel,\r\n    DialogContent, DialogTitle, Typography\r\n} from \"@material-ui/core\";\r\nimport {useState, FC} from \"react\";\r\nimport {Formik, Form, Field, FormikErrors} from \"formik\";\r\nimport {Switch, TextField} from \"formik-material-ui\";\r\n\r\ntype LoginType = {\r\n    errorMessage: string | null,\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string | undefined) => void\r\n    captchaUrl: string | undefined\r\n}\r\nexport type LoginValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string | undefined\r\n}\r\n\r\nexport const Login: FC<LoginType> = ({errorMessage, login, captchaUrl}) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const onSubmit = (data: LoginValuesType) => {\r\n        login(data.email, data.password, data.rememberMe, data.captcha);\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"outlined\" color=\"secondary\" onClick={handleClickOpen}>\r\n                Login\r\n            </Button>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Login</DialogTitle>\r\n                <DialogContent>\r\n                    <Typography variant={\"subtitle1\"}>Please use test email: </Typography>\r\n                    <Typography variant={\"h4\"}>free@samuraijs.com</Typography>\r\n                    <Typography variant={\"subtitle1\"}>Please use test password: </Typography>\r\n                    <Typography variant={\"h4\"}>free</Typography>\r\n                    <Formik\r\n                        initialValues={{\r\n                            email: \"free@samuraijs.com\",\r\n                            password: \"free\",\r\n                            rememberMe: false,\r\n                            captcha: undefined as string | undefined,\r\n                        }}\r\n                        validate={(values: LoginValuesType) => {\r\n                            const errors: FormikErrors<LoginValuesType> = {};\r\n                            if (!values.email) {\r\n                                errors.email = 'Required';\r\n                            } else if (\r\n                                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n                            ) {\r\n                                errors.email = 'Invalid email address';\r\n                            }\r\n                            return errors;\r\n                        }}\r\n                        onSubmit={values => onSubmit(values)}\r\n                    >\r\n                        <Form>\r\n                            <Box margin={1}>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    name={\"email\"}\r\n                                    type={\"email\"}\r\n                                    label={\"Email\"}\r\n                                    helperText={\"email\"}\r\n                                />\r\n                            </Box>\r\n                            <Box margin={1}>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    type=\"password\"\r\n                                    label=\"Password\"\r\n                                    name=\"password\"\r\n                                />\r\n                            </Box>\r\n                            <Box margin={1}>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Field component={Switch} type=\"checkbox\" name=\"rememberMe\"/>\r\n                                    }\r\n                                    label=\"Remember me\"\r\n                                />\r\n                            </Box>\r\n                            <Box margin={1}>\r\n                                {captchaUrl && <img style={{display: \"inherit\"}} src={captchaUrl} alt=\"captcha\"/>}\r\n                                {captchaUrl &&\r\n                                <Field\r\n                                    component={TextField}\r\n                                    type=\"captcha\"\r\n                                    label=\"Captcha\"\r\n                                    name=\"captcha\"\r\n                                />}\r\n                                {errorMessage && <Box margin={2}><Typography variant={\"subtitle1\"} style={{\r\n                                    color: \"red\",\r\n                                    backgroundColor: \"white\"\r\n                                }}>{errorMessage}</Typography></Box>}\r\n                            </Box>\r\n                            <DialogActions>\r\n                                <Button onClick={handleClose}>\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button type={\"submit\"}>\r\n                                    Login\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Form>\r\n                    </Formik>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n","import {FC} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Login} from \"./login\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nconst LoginContainer: FC<UsersContainerType> = ({login, errorMessage, captchaUrl}) => {\r\n\r\n    return (\r\n        <Login errorMessage={errorMessage} login={login} captchaUrl={captchaUrl}/>\r\n    )\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    errorMessage: string | null\r\n    captchaUrl: string | undefined\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string| undefined) => void\r\n}\r\n\r\ntype UsersContainerType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        errorMessage: state.auth.errorMessage,\r\n        captchaUrl: state.auth.captchaUrl,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps: MapDispatchToPropsType = {\r\n    login,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);","import {FC, useState} from \"react\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport {AppBar, Toolbar, Typography, IconButton, Button} from \"@material-ui/core\"\r\nimport MenuIcon from \"@material-ui/icons/Menu\"\r\nimport {DrawerComponent} from \"./drawerComponent\"\r\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\"\r\nimport CloseIcon from \"@material-ui/icons/Close\"\r\nimport LoginContainer from \"../login/loginContainer\"\r\nimport {HeaderContainerPropsType} from \"./headerContainer\"\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nexport const drawerWidth = 200\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    hide: {\r\n        display: \"none\",\r\n    },\r\n    toolbar: {\r\n        justifyContent: \"space-between\",\r\n    },\r\n    title: {\r\n        marginLeft: 20,\r\n        color: \"black\",\r\n        cursor: \"pointer\",\r\n    },\r\n    login: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n    },\r\n    empty: {\r\n        flexGrow: 1,\r\n    },\r\n    name: {\r\n        marginRight: 12,\r\n    },\r\n}))\r\n\r\n\r\nexport const Header: FC<HeaderContainerPropsType> = ({isAuth, login, logout, darkMode, setDarkMode}) => {\r\n    const classes = useStyles()\r\n    const [open, setOpen] = useState(false)\r\n    const history = useHistory()\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={classes.appBar}\r\n            >\r\n                <Toolbar className={classes.toolbar}>\r\n                    {open\r\n                        ? <IconButton onClick={handleDrawerClose} color={\"inherit\"} edge=\"start\">\r\n                            <CloseIcon/>\r\n                        </IconButton>\r\n                        : <IconButton color=\"inherit\" onClick={handleDrawerOpen} edge=\"start\">\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                    }\r\n                    <Typography onClick={() => history.push(\"/\")} variant=\"h6\" noWrap className={classes.title}>\r\n                        Social network\r\n                    </Typography>\r\n                    <div className={classes.empty}/>\r\n                    <div className={classes.login}>\r\n                        <IconButton color={\"secondary\"} onClick={() => setDarkMode(!darkMode)}>\r\n                            <Brightness4Icon/>\r\n                        </IconButton>\r\n                        <div>\r\n                            {isAuth\r\n                                ? <div className={classes.login}>\r\n                                    <Typography className={classes.name} variant={\"h6\"}>{login}</Typography>\r\n                                    <Button color={\"secondary\"} variant=\"outlined\" onClick={logout}>Log out</Button>\r\n                                </div>\r\n                                : <LoginContainer/>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <DrawerComponent open={open} handleDrawerClose={handleDrawerClose}/>\r\n        </div>\r\n    )\r\n}\r\n","import {Header} from \"./header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport React, {FC} from \"react\";\r\n\r\nexport type HeaderContainerPropsType = {\r\n    logout: () => void,\r\n    isAuth: boolean,\r\n    login: string | null,\r\n    darkMode: boolean,\r\n    setDarkMode: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nconst HeaderContainer: FC<HeaderContainerPropsType> = ({isAuth, login, logout, darkMode, setDarkMode}) => {\r\n    return (\r\n        <Header isAuth={isAuth} login={login} logout={logout} darkMode={darkMode} setDarkMode={setDarkMode}/>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    logout,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderContainer);","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nexport type AppInitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n};\r\n\r\nexport const appReducer = (state = initialState, action: ActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst actions = {\r\n    initializedSuccess: () => ({type: \"INITIALIZED_SUCCESS\"} as const),\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport const initializeApp = (): ThunkType => async (dispatch) => {\r\n    const promise = dispatch(getAuthUserData());\r\n    promise.then(() => {\r\n        dispatch(actions.initializedSuccess());\r\n    })\r\n};","import {LinearProgress} from \"@material-ui/core\";\r\nimport {useTheme} from \"@material-ui/core/styles\";\r\n\r\nexport const Preloader = () => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <LinearProgress style={{\r\n            backgroundColor: \"#303030\",\r\n            marginBottom: theme.spacing(2),\r\n        }}/>\r\n    );\r\n};","export default __webpack_public_path__ + \"static/media/welcome-home-welcome-home-de.842af542.jpg\";","import welcome from \"../../../assets/images/welcome-home-welcome-home-de.jpg\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        height: \"80vh\",\r\n    }\r\n});\r\n\r\nexport const Welcome = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <img className={classes.root} src={welcome} alt=\"welcome\"/>\r\n        </div>\r\n    );\r\n};","\r\n\r\nexport const NotFound = () => {\r\n    return (\r\n        <div>Not Found</div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    state = {\r\n        error: false\r\n    };\r\n\r\n    componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n        this.setState({error: true});\r\n        console.log(errorInfo)\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <img src=\"https://miro.medium.com/max/700/1*v4dLIlWpJkCiSDKv7xguLA.png\" alt=\"error\"/>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}","import {Preloader} from \"../../common/preloader/preloader\";\r\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {ProfileType} from \"../../../../types/typs\";\r\n\r\ntype ProfileStatusType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean,\r\n}\r\n\r\nexport const ProfileStatus: React.FC<ProfileStatusType> = ({profile, status, updateUserStatus, isOwner}) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [localStatus, setLocalStatus] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        setLocalStatus(status);\r\n    }, [status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateUserStatus(localStatus as string);\r\n    };\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value);\r\n    };\r\n\r\n    if (!profile) return <Preloader/>;\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ? <div>\r\n                    <div>\r\n                        <b>Status: </b>\r\n                        <span onDoubleClick={isOwner ? () => activateEditMode() : undefined}>{localStatus || \"No status\"}</span>\r\n                    </div>\r\n\r\n                </div>\r\n                : <div>\r\n                    <input onChange={onChange}\r\n                           autoFocus={true} onBlur={() => deactivateEditMode()}\r\n                           type=\"text\" defaultValue={localStatus}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import {useForm} from \"react-hook-form\";\r\nimport React, {FC, useState} from \"react\";\r\nimport {ProfileType} from \"../../../../types/typs\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    setEditMode: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nexport const ProfileDataForm: FC<ProfileDataFormPropsType> = ({profile, saveProfile, setEditMode}) => {\r\n    const [errors, setErrors] = useState([]);\r\n    const {register, handleSubmit} = useForm({\r\n        defaultValues: {\r\n            fullName: profile.fullName,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            aboutMe: profile.aboutMe,\r\n            contacts: {\r\n                facebook: profile.contacts.facebook,\r\n                website: profile.contacts.website,\r\n                vk: profile.contacts.vk,\r\n                twitter: profile.contacts.twitter,\r\n                instagram: profile.contacts.instagram,\r\n                youtube: profile.contacts.youtube,\r\n                github: profile.contacts.github,\r\n                mainLink: profile.contacts.mainLink,\r\n            }\r\n        }\r\n    });\r\n    const onSubmit = (data: ProfileType) => {\r\n        saveProfile(data)\r\n            .then(() => setEditMode(false))\r\n            .catch(reject => setErrors(reject))\r\n\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div>\r\n                <div>\r\n                    <button>save</button>\r\n                </div>\r\n                {errors.map(elem =>\r\n                    <div key={elem}>\r\n                        {elem}\r\n                    </div>)\r\n                }\r\n                <div>\r\n                    <div>\r\n                        <b>Full name: </b>\r\n                        <div>\r\n                            <input type=\"text\" placeholder={\"Full name\"}{...register(\"fullName\")}/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <b>Looking for a job: </b>\r\n                        <div>\r\n                            <input type=\"checkbox\" {...register(\"lookingForAJob\")}/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <b>My professional skills: </b>\r\n                        <div>\r\n                            <textarea\r\n                                placeholder={\"My professional skills\"}{...register(\"lookingForAJobDescription\")}/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <b>About me: </b>\r\n                        <div>\r\n                            <textarea placeholder={\"About me\"}{...register(\"aboutMe\")}/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <b>Contacts: </b>\r\n                        <div>\r\n                            {\r\n                                Object.keys(profile.contacts)\r\n                                    .map(key =>\r\n                                        <div key={key}>\r\n                                            <b>{key}: </b>\r\n                                            <input type=\"text\"\r\n                                                   placeholder={key}{...register(`contacts.${key}` as any)}/>\r\n                                        </div>\r\n                                    )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};","import {Preloader} from \"../../common/preloader/preloader\";\r\nimport {ProfileStatus} from \"./profileStatus\";\r\nimport avatar from \"../../../../assets/images/avatar.svg\";\r\nimport {ChangeEvent, FC, useState} from \"react\";\r\nimport {ProfileDataForm} from \"./profileDataForm\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {ContactsType, ProfileType} from \"../../../../types/typs\";\r\n\r\ntype ProfileInfoTypes = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport const ProfileInfo: FC<ProfileInfoTypes> = ({\r\n                                profile,\r\n                                status,\r\n                                updateUserStatus,\r\n                                isOwner,\r\n                                savePhoto,\r\n                                saveProfile,\r\n                            }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    if (!profile) return <Preloader/>;\r\n    return (\r\n        <div>\r\n            <div >\r\n                <img  src={profile.photos.large || avatar} alt=\"img\"/>\r\n                {editMode\r\n                    ? <ProfileDataForm profile={profile} saveProfile={saveProfile} setEditMode={setEditMode}\r\n                    />\r\n                    : <ProfileData profile={profile} goToEditMode={() => setEditMode(true)} isOwner={isOwner}/>\r\n                }\r\n                <ProfileStatus profile={profile} status={status} updateUserStatus={updateUserStatus} isOwner={isOwner}/>\r\n            </div>\r\n            {isOwner && <input type={\"file\"} onChange={mainPhotoSelected}/>}\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ProfileDataTypes = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataTypes> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <button onClick={goToEditMode}>edit</button>}\r\n            <div>\r\n                <Typography variant={\"subtitle1\"}>Full name:</Typography>\r\n                <Typography variant={\"subtitle2\"}>{profile.fullName}</Typography>\r\n            </div>\r\n            <div>\r\n                <Typography variant={\"subtitle1\"}>Looking for a job:</Typography>\r\n                <Typography variant={\"subtitle2\"}>{profile.lookingForAJob ? \"yes\" : \"no\"}</Typography>\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <Typography variant={\"subtitle1\"}>My professional skills:</Typography>\r\n                <Typography variant={\"subtitle2\"}>{profile.lookingForAJobDescription}</Typography>\r\n            </div>\r\n            }\r\n            <div>\r\n                <Typography variant={\"subtitle1\"}>About me:</Typography>\r\n                <Typography variant={\"subtitle2\"}>{profile.aboutMe}</Typography>\r\n            </div>\r\n            <div>\r\n                <Typography variant={\"subtitle1\"}>Contacts:</Typography>\r\n                {\r\n                    Object.keys(profile.contacts)\r\n                        .map(key =>\r\n                            <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                        )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ContactsPropType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: FC<ContactsPropType> = ({contactTitle, contactValue}) => {\r\n    // if (!contactValue) return null\r\n    return (\r\n        <div >\r\n            <Typography variant={\"subtitle1\"}>{contactTitle}: </Typography>{contactValue}\r\n        </div>\r\n    );\r\n};","import {PhotosType, ProfileType} from \"../types/typs\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\r\n    }\r\n};","import {PhotosType, PostType, ProfileType} from \"../types/typs\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 11},\r\n        {id: 2, message: \"It's my first post\", likesCount: 22},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n    newPostText: \"\",\r\n};\r\n\r\nexport type ProfileInitialStateType = typeof initialState;\r\n\r\nexport const profileReducer = (state = initialState, action: ActionsType): ProfileInitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_POST\":\r\n            const newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n\r\n        case \"SET_USER_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n\r\n        case \"SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n\r\n        case \"DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId),\r\n            };\r\n\r\n        case \"SAVE_PHOTO_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    photos: action.photos\r\n                } as ProfileType\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    addPost: (newPostText: string) => ({type: \"ADD_POST\", newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: \"SET_USER_PROFILE\", profile} as const),\r\n    setStatus: (status: string) => ({type: \"SET_STATUS\", status} as const),\r\n    deletePost: (postId: number) => ({type: \"DELETE_POST\", postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: \"SAVE_PHOTO_SUCCESS\", photos} as const),\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n};\r\n\r\nexport const getUserStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n};\r\n\r\nexport const updateUserStatus = (status: string): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const data = await profileAPI.saveProfile(profile);\r\n    if (data.resultCode === 0) {\r\n        if (userId !== null) {\r\n            await dispatch(getUserProfile(userId));\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        return Promise.reject(data.messages);\r\n    }\r\n};","import avatar from \"../../../../../assets/images/avatar.svg\"\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\r\nimport {FC} from \"react\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    info: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n        padding: theme.spacing(2),\r\n\r\n    },\r\n    content: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    img: {\r\n        height: \"100px\",\r\n        borderRadius: \"50%\",\r\n        marginBottom: theme.spacing(1),\r\n    }\r\n}));\r\n\r\ntype PostType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post: FC<PostType> = ({message, likesCount}) => {\r\n    const theme = useTheme();\r\n    const classes = useStyles(theme);\r\n\r\n    return (\r\n        <Card className={classes.info}>\r\n            <CardContent className={classes.content}>\r\n                <img className={classes.img} src={avatar} alt=\"avatar\"/>\r\n                <div>\r\n                    <Typography variant={\"body1\"} align={\"center\"}>\r\n                        {message}\r\n                    </Typography>\r\n                    <Typography variant={\"body2\"} align={\"left\"}>\r\n                        like: {likesCount}\r\n                    </Typography>\r\n                </div>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};","import {Post} from \"./posts/post\";\r\nimport {AddMessageFormik} from \"../../addMessageForm/addMessageForm\";\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\r\nimport {PostType} from \"../../../../types/typs\";\r\nimport {FC} from \"react\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    title: {\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n}));\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostType>,\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport const MyPosts: FC<MyPostsType> = ({posts, addPost}) => {\r\n    const theme = useTheme();\r\n    const classes = useStyles(theme);\r\n\r\n    return (\r\n        <div>\r\n            <Card >\r\n                <CardContent>\r\n                    <Typography className={classes.title} variant={\"h5\"}>My Posts</Typography>\r\n                    <AddMessageFormik sendMessage={addPost}/>\r\n                </CardContent>\r\n            </Card>\r\n            <div>\r\n                {\r\n                    posts.map(elem => <Post key={elem.id} message={elem.message} likesCount={elem.likesCount}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};","import {connect} from \"react-redux\";\r\nimport {actions} from \"../../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./myPosts\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport {PostType} from \"../../../../types/typs\";\r\nimport {FC} from \"react\";\r\n\r\ntype MyPostsContainerType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPostText: string) =>void\r\n}\r\n\r\nconst MyPostsContainer: FC<MyPostsContainerType> = ({posts, addPost}) => {\r\n    return (\r\n        <MyPosts posts={posts} addPost={addPost}/>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    addPost: actions.addPost\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPostsContainer);","import {ProfileInfo} from \"./profileInfo/profileInfo\";\r\nimport MyPostsContainer from \"./myPosts/myPostsContainer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {Preloader} from \"../common/preloader/preloader\";\r\nimport {ProfileType} from \"../../../types/typs\";\r\nimport {FC} from \"react\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    info: {\r\n        margin: theme.spacing(2),\r\n        padding: theme.spacing(2)\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(2),\r\n    }\r\n}));\r\n\r\ntype ProfilePropsTypes = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport const Profile: FC<ProfilePropsTypes> = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\r\n    const theme = useTheme();\r\n    const classes = useStyles(theme);\r\n\r\n    if (!profile) return <Preloader/>;\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item>\r\n                <Paper className={classes.info}>\r\n                    <ProfileInfo profile={profile} status={status} updateUserStatus={updateUserStatus} isOwner={isOwner}\r\n                                 savePhoto={savePhoto}\r\n                                 saveProfile={saveProfile}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item className={classes.paper}>\r\n                <MyPostsContainer/>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};","import {Profile} from \"./profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {FC, useEffect} from \"react\";\r\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from \"../../../redux/profile-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {ProfileType} from \"../../../types/typs\";\r\n\r\ntype ProfileContainerTypes = MapStateToPropsTypes & MapDispatchToPropsTypes\r\n\r\nconst ProfileContainer: FC<ProfileContainerTypes> = ({\r\n                              profile, status, authorizedUserId,\r\n                              getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile,\r\n                          }) => {\r\n\r\n    let userId = useParams<PathParamsType>().userId || authorizedUserId || 16528;\r\n\r\n    useEffect(() => {\r\n        getUserProfile(+userId);\r\n        getUserStatus(+userId);\r\n    }, [getUserStatus, getUserProfile, userId]);\r\n\r\n    return (\r\n        <Profile profile={profile} status={status} updateUserStatus={updateUserStatus}\r\n                 isOwner={userId === authorizedUserId} savePhoto={savePhoto}\r\n                 saveProfile={saveProfile}\r\n        />\r\n    );\r\n};\r\n\r\ntype MapStateToPropsTypes = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToPropsTypes = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileContainer);","\r\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((i: any) => {\r\n        if (i[objPropName] === itemId) {\r\n            return {...i, ...newObjProps};\r\n        }\r\n        return i;\r\n    });\r\n};","import {GetItemsType, instance, APIResponseType} from \"./api\"\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10, term: string = \"\", friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`\r\n            + (friend === null ? \"\" : `&friend=${friend}`))\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<APIResponseType>(`follow/${userId}`).then(response => response.data)\r\n    },\r\n}","import {updateObjectInArray} from \"../utils/object-helpers\"\r\nimport {UserType} from \"../types/typs\"\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\"\r\nimport {Dispatch} from \"redux\"\r\nimport {usersAPI} from \"../api/users-api\"\r\nimport {APIResponseType} from \"../api/api\"\r\n\r\nconst initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 100,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as number[], // array of users ids\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as null | boolean\r\n    },\r\n}\r\n\r\nexport type UsersInitialState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\n\r\nexport const usersReducer = (state = initialState, action: ActionsTypes): UsersInitialState => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true}),\r\n            }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false}),\r\n            }\r\n\r\n        case \"SET_USERS\":\r\n            return {...state, users: action.users}\r\n\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case \"SET_TOTAL_USERS_COUNT\":\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case \"SET_FILTER\":\r\n            return {...state, filter: action.payload}\r\n\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId),\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: \"FOLLOW\", userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: \"UNFOLLOW\", userId} as const),\r\n    setUsers: (users: UserType[]) => ({type: \"SET_USERS\", users} as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: \"SET_CURRENT_PAGE\",\r\n        currentPage,\r\n    } as const),\r\n    setFilter: (filter: FilterType) => ({\r\n        type: \"SET_FILTER\",\r\n        payload: filter,\r\n    } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: \"SET_TOTAL_USERS_COUNT\",\r\n        totalUsersCount,\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: \"TOGGLE_IS_FETCHING\",\r\n        isFetching,\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: \"TOGGLE_IS_FOLLOWING_PROGRESS\",\r\n        isFetching,\r\n        userId,\r\n    } as const),\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\nexport const getUsersThunkCreator = (page: number, pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(page))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        const response = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(response.items))\r\n        dispatch(actions.setTotalUsersCount(response.totalCount))\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    const response = await apiMethod(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow, actions.followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow, actions.unfollowSuccess)\r\n    }\r\n}","import React, {useState} from \"react\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n    }\r\n})\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    portionSize?: number,\r\n}\r\n\r\nexport const Paginator: React.FC<PropsType> = ({\r\n                                               totalItemsCount,\r\n                                               pageSize,\r\n                                               currentPage,\r\n                                               onPageChanged,\r\n                                               portionSize = 10\r\n                                           }) => {\r\n    const [portionNumber, setPortionNumber] = useState(1);\r\n    const classes = useStyles()\r\n\r\n    const pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    const pages: number[] = Array.from({length: pagesCount}, (_, k) => k + 1);\r\n    const portionCount = Math.ceil(pagesCount / portionSize);\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    const rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {portionNumber > 1 &&\r\n            <div>\r\n                <IconButton onClick={() => {\r\n                    setPortionNumber(1)\r\n                }}>\r\n                    <FirstPageIcon/>\r\n                </IconButton>\r\n                <IconButton onClick={() => {\r\n                    setPortionNumber(portionNumber - 1)\r\n                }}>\r\n                    <NavigateBeforeIcon/>\r\n                </IconButton>\r\n            </div>\r\n            }\r\n            {\r\n                pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map(p => (p === currentPage)\r\n                        ? <Button key={p} variant={\"outlined\"}\r\n                                  onClick={() => onPageChanged(p)}\r\n                        >{p}</Button>\r\n                        : <Button key={p} onClick={() => onPageChanged(p)}>{p}</Button>\r\n                    )\r\n            }\r\n            {\r\n                portionCount > portionNumber &&\r\n                <>\r\n                    <IconButton onClick={() => {\r\n                        setPortionNumber(portionNumber + 1)\r\n                    }}>\r\n                        <NavigateNextIcon/>\r\n                    </IconButton>\r\n                    <IconButton onClick={() => {\r\n                        setPortionNumber(portionCount)\r\n                    }}>\r\n                        <LastPageIcon/>\r\n                    </IconButton>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n};","import {NavLink} from \"react-router-dom\";\r\nimport avatar from \"../../../assets/images/avatar.svg\";\r\nimport {Button, CardActions, Grid} from \"@material-ui/core\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {FC} from \"react\";\r\nimport {UserType} from \"../../../types/typs\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 270,\r\n        height: 370,\r\n        margin: \"8px\",\r\n    },\r\n    media: {\r\n        height: \"200px\",\r\n    },\r\n});\r\n\r\ntype UserPropsType = {\r\n    unfollow: (userId: number) => void,\r\n    follow: (userId: number) => void,\r\n    followingInProgress: number[],\r\n    user: UserType\r\n}\r\n\r\nexport const User: FC<UserPropsType> = ({user, followingInProgress, follow, unfollow}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid item>\r\n            <Card className={classes.root}>\r\n                <CardActionArea component={NavLink} to={`/profile/${user.id}`}>\r\n                    <CardMedia\r\n                        className={classes.media}\r\n                        image={user.photos.large ? user.photos.large : avatar}\r\n                        title={user.name}\r\n                    />\r\n                    <CardContent>\r\n                        <Typography noWrap gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Name:<br/>{user.name}\r\n                        </Typography>\r\n                        <Typography noWrap variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Status: {user.status || \"No status\"}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                    {user.followed\r\n                        ? <Button variant={\"contained\"} fullWidth size=\"small\"\r\n                                  disabled={followingInProgress.some(userId => userId === user.id)}\r\n                                  onClick={() => unfollow(user.id)}\r\n                        >Unfollow</Button>\r\n                        : <Button variant={\"contained\"} fullWidth size=\"small\"\r\n                                  disabled={followingInProgress.some(userId => userId === user.id)}\r\n                                  onClick={() => follow(user.id)}\r\n                        >Follow</Button>\r\n                    }\r\n                </CardActions>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n};","import {Form, Formik, Field, FormikHelpers} from \"formik\"\r\nimport {Button, InputBase, MenuItem} from \"@material-ui/core\"\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\nimport {fade, makeStyles, useTheme} from \"@material-ui/core/styles\"\r\nimport {FilterType} from \"../../../redux/users-reducer\"\r\nimport {FC} from \"react\"\r\nimport {Select} from \"formik-material-ui\"\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: theme.spacing(2),\r\n    },\r\n    select: {\r\n        width: 141\r\n    },\r\n    search: {\r\n        position: \"relative\",\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        \"&:hover\": {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginRight: theme.spacing(2),\r\n        marginLeft: 0,\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            marginLeft: theme.spacing(3),\r\n            width: \"auto\",\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: \"100%\",\r\n        position: \"absolute\",\r\n        pointerEvents: \"none\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    inputRoot: {\r\n        color: \"inherit\",\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create(\"width\"),\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"20ch\",\r\n        },\r\n    },\r\n}))\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    return {}\r\n}\r\n\r\ntype UsersSearchFormPropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\ntype FormType = {\r\n    term: string\r\n    friend: \"true\" | \"false\" | \"null\"\r\n}\r\n\r\nexport const UsersSearchForm: FC<UsersSearchFormPropsType> = ({onFilterChanged}) => {\r\n    const classes = useStyles(useTheme())\r\n\r\n    const onSubmit = (values: FormType, {setSubmitting}: FormikHelpers<FormType>) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false,\r\n        }\r\n        onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Formik\r\n                initialValues={{term: \"\", friend: \"null\"}}\r\n                onSubmit={onSubmit}\r\n                validate={usersSearchFormValidate}\r\n            >\r\n                {({\r\n                      values,\r\n                      errors,\r\n                      touched,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      handleSubmit,\r\n                      isSubmitting,\r\n                      /* and other goodies */\r\n                  }) => (\r\n                    <Form>\r\n                        <div className={classes.search}>\r\n                            <div className={classes.searchIcon}>\r\n                                <SearchIcon/>\r\n                            </div>\r\n                            <Field\r\n                                component={InputBase}\r\n                                placeholder=\"Search…\"\r\n                                classes={{\r\n                                    root: classes.inputRoot,\r\n                                    input: classes.inputInput,\r\n                                }}\r\n                                inputProps={{\"aria-label\": \"search\"}}\r\n                                id={\"term\"}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.term}\r\n                            />\r\n                            <Field\r\n                                className={classes.select}\r\n                                component={Select}\r\n                                type=\"text\"\r\n                                name=\"friend\"\r\n                                variant=\"standard\"\r\n                            >\r\n                                <MenuItem value={\"null\"}>All</MenuItem>\r\n                                <MenuItem value={\"true\"}>Only followed</MenuItem>\r\n                                <MenuItem value={\"false\"}>Only unfollowed</MenuItem>\r\n                            </Field>\r\n                            <Button type=\"submit\" disabled={isSubmitting}>\r\n                                Submit\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}","import {Paginator} from \"../common/paginator/paginator\"\r\nimport {User} from \"./user\"\r\nimport {Grid} from \"@material-ui/core\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport React from \"react\"\r\nimport {UserType} from \"../../../types/typs\"\r\nimport {UsersSearchForm} from \"./usersSearchForm\"\r\nimport {FilterType} from \"../../../redux/users-reducer\"\r\n\r\nconst useStyle = makeStyles({\r\n    root: {\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        flexWrap: \"wrap\",\r\n    },\r\n    cards: {\r\n        margin: 20,\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        justifyContent: \"center\",\r\n    },\r\n})\r\n\r\ntype UsersType = {\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    users: UserType[],\r\n    follow: (userId: number) => void,\r\n    unfollow: (userId: number) => void,\r\n    followingInProgress: number[],\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const Users: React.FC<UsersType> = React.memo(({\r\n                                               totalUsersCount, pageSize, currentPage, onPageChanged, follow, unfollow,\r\n                                               users, followingInProgress, onFilterChanged,\r\n                                           }) => {\r\n    const classes = useStyle()\r\n\r\n    return (\r\n        <Grid container className={classes.root}>\r\n            <Grid item>\r\n                <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            </Grid>\r\n            <Grid item>\r\n                <Paginator totalItemsCount={totalUsersCount} pageSize={pageSize} currentPage={currentPage}\r\n                           onPageChanged={onPageChanged}/>\r\n            </Grid>\r\n            <Grid item className={classes.cards}>\r\n                {\r\n                    users.map((user, index) => (\r\n                            <User key={index} user={user} followingInProgress={followingInProgress}\r\n                                  follow={follow} unfollow={unfollow}/>\r\n                        ),\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n})","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nconst getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\n\r\nexport const getUsersSelector =\r\n    createSelector(getUsers, (users) => {\r\n        return users;\r\n    });","import {connect} from \"react-redux\"\r\nimport {\r\n    getUsersThunkCreator, follow, unfollow, FilterType,\r\n} from \"../../../redux/users-reducer\"\r\nimport React, {useEffect} from \"react\"\r\nimport {Users} from \"./users\"\r\nimport {getUsersSelector} from \"./usersSelectors\"\r\nimport {Preloader} from \"../common/preloader/preloader\"\r\nimport {UserType} from \"../../../types/typs\"\r\nimport {AppStateType} from \"../../../redux/redux-store\"\r\n\r\ntype UsersContainerType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst UsersContainer: React.FC<UsersContainerType> = ({\r\n                                                          follow, unfollow, users, pageSize,\r\n                                                          totalUsersCount, currentPage, isFetching,\r\n                                                          followingInProgress, getUsersThunkCreator, filter,\r\n                                                      }) => {\r\n\r\n    useEffect(() => {\r\n        getUsersThunkCreator(currentPage, pageSize, filter)\r\n    }, [currentPage, getUsersThunkCreator, pageSize, filter])\r\n\r\n    const onPageChanged = (currentPage: number) => {\r\n        getUsersThunkCreator(currentPage, pageSize, filter)\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        getUsersThunkCreator(1, pageSize, filter)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isFetching ? <Preloader/> : undefined}\r\n            <Users\r\n                totalUsersCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n                currentPage={currentPage}\r\n                onPageChanged={onPageChanged}\r\n                follow={follow}\r\n                unfollow={unfollow}\r\n                users={users}\r\n                followingInProgress={followingInProgress}\r\n                onFilterChanged={onFilterChanged}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number,\r\n    pageSize: number,\r\n    isFetching: boolean,\r\n    totalUsersCount: number,\r\n    users: UserType[],\r\n    followingInProgress: number[],\r\n    filter: FilterType,\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    unfollow: (userId: number) => void,\r\n    follow: (userId: number) => void,\r\n    getUsersThunkCreator: (currentPage: number, pageSize: number, filter: FilterType) => void,\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getUsersSelector(state),\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n        filter: state.usersPage.filter,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    follow, unfollow, getUsersThunkCreator,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainer)","import {FC, lazy, Suspense, useState} from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport HeaderContainer from \"../header/headerContainer\";\r\nimport {useEffect} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {initializeApp} from \"../../redux/app-reducer\";\r\nimport {Preloader} from \"../content/common/preloader/preloader\";\r\nimport {Welcome} from \"../content/welcome/welcome\";\r\nimport {NotFound} from \"../content/notFound/notFound\";\r\nimport ErrorBoundary from \"../content/errorBoundary/errorBoundary\";\r\nimport {ThemeProvider} from \"@material-ui/core/styles\";\r\nimport {CssBaseline, Grid} from \"@material-ui/core\";\r\nimport {createMuiTheme} from '@material-ui/core/styles';\r\nimport ProfileContainer from \"../content/profile/profileContainer\";\r\nimport UsersContainer from \"../content/users/usersContainer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withSuspense} from \"../../hoc/withSuspense\";\r\n\r\nconst DialogsContainer = lazy(() => import(\"../content/dialogs/dialogs-container\"));\r\n// redirect if you not authorized\r\nconst SuspendedDialogs = withSuspense(DialogsContainer);\r\n\r\nconst App: FC<MapStatePropsType & DispatchPropsType> = ({initialized, initializeApp}) => {\r\n    const [darkMode, setDarkMode] = useState(true);\r\n    useEffect(() => {\r\n        initializeApp();\r\n    }, [initializeApp]);\r\n\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            type: darkMode ? \"dark\" : \"light\",\r\n            primary: {\r\n                main: \"#FFFFFFFF\",\r\n            },\r\n            secondary: {\r\n                main: \"#000000FF\"\r\n            },\r\n        }\r\n    });\r\n\r\n    const preloader = (\r\n        <div className={\"app-wrapper\"}>\r\n            <Preloader/>\r\n        </div>\r\n    );\r\n\r\n    if (!initialized) return preloader;\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline/>\r\n            <Grid container direction={\"column\"}>\r\n                <ErrorBoundary>\r\n                    <Grid item>\r\n                        <HeaderContainer darkMode={darkMode} setDarkMode={setDarkMode}/>\r\n                    </Grid>\r\n                    <Grid item style={{margin: 56, padding: 24}}>\r\n                        <Suspense fallback={preloader}>\r\n                            <Switch>\r\n                                <Route path={\"/\"} exact component={Welcome}/>\r\n                                <Route path={\"/profile/:userId?\"} component={ProfileContainer}/>\r\n                                <Route path={\"/dialogs\"} component={SuspendedDialogs}/>\r\n                                <Route path={\"/users\"} component={UsersContainer}/>\r\n                                <Route component={NotFound}/>\r\n                            </Switch>\r\n                        </Suspense>\r\n                    </Grid>\r\n                </ErrorBoundary>\r\n            </Grid>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    initializeApp,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React, {ComponentType} from \"react\"\r\nimport {Preloader} from \"../components/content/common/preloader/preloader\";\r\n\r\nfunction withSuspense<WrappedComponentProps>(WrappedComponent: ComponentType<WrappedComponentProps>) {\r\n    return (props: WrappedComponentProps) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n\r\nexport {withSuspense};","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys: string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n});\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store =\r\n    createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app/app';\r\nimport {store} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <>\r\n        {/*HashRouter for github pages / BrowserRouter*/}\r\n        <HashRouter basename={process.env.PUBLIC_URL}>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </>,\r\n    document.getElementById('root')\r\n);","export default __webpack_public_path__ + \"static/media/avatar.4084d3ab.svg\";"],"sourceRoot":""}