{"version":3,"sources":["api/api.ts","components/header/drawerComponent.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/login/login.tsx","components/login/loginContainer.tsx","components/header/header.tsx","components/header/headerContainer.tsx","redux/app-reducer.ts","components/content/common/preloader/preloader.tsx","assets/images/login-key-flat-isometric_126523-1865.jpg","components/content/welcome/welcome.tsx","components/content/notFound/notFound.tsx","components/content/errorBoundary/errorBoundary.tsx","components/content/profile/profileInfo/profileStatus.tsx","components/content/profile/profileInfo/contacts.tsx","components/content/profile/profileInfo/profileData.tsx","components/content/profile/profileInfo/profileDataForm.tsx","components/content/profile/profileInfo/editProfileInfo/editProfileInfo.tsx","components/content/profile/profileInfo/profileInfo.tsx","components/content/profile/profile.tsx","api/profile-api.ts","redux/profile-reducer.ts","components/content/profile/profileContainer.tsx","components/content/common/paginator/paginator.tsx","components/content/users/user.tsx","components/content/users/usersSearchForm.tsx","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","redux/selectors/usersSelectors.ts","components/content/users/users.tsx","components/content/users/usersContainer.tsx","components/app/app.tsx","hoc/withSuspense.tsx","redux/dialogs-reducer.ts","redux/redux-store.ts","index.tsx","assets/images/avatar.svg","api/chat-api.ts","redux/chat-reducer.ts"],"names":["ResultCodesEnum","ResultCodeForCaptcha","useStyles","makeStyles","theme","drawer","width","drawerWidth","flexShrink","whiteSpace","drawerOpen","transition","transitions","create","easing","sharp","duration","enteringScreen","drawerClose","leavingScreen","overflowX","spacing","toolbar","display","alignItems","justifyContent","padding","mixins","DrawerComponent","handleDrawerClose","open","useTheme","classes","history","useHistory","Drawer","variant","className","clsx","paper","IconButton","onClick","direction","Divider","List","ListItem","button","push","ListItemIcon","ListItemText","primary","instance","axios","withCredentials","baseURL","headers","authAPI","get","then","response","data","email","password","rememberMe","captcha","post","res","delete","securityAPI","initialState","userId","login","isAuth","errorMessage","captchaUrl","undefined","actions","type","payload","getAuthUserData","dispatch","a","meData","resultCode","Success","id","getCaptchaUrl","url","Login","onSubmit","useState","setOpen","handleClose","Button","color","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","Typography","initialValues","validate","values","errors","test","Box","margin","component","TextField","name","label","helperText","FormControlLabel","control","Switch","style","src","alt","backgroundColor","DialogActions","LoginContainer","useSelector","state","auth","useDispatch","loginData","CaptchaIsRequired","messages","root","appBar","zIndex","menuButton","marginRight","hide","title","marginLeft","cursor","empty","flexGrow","Header","logout","darkMode","setDarkMode","AppBar","position","Toolbar","edge","noWrap","mapDispatchToProps","connect","initialized","Preloader","LinearProgress","marginBottom","item","img","Welcome","Grid","container","sm","welcome","NotFound","ErrorBoundary","error","errorInfo","this","setState","console","log","props","children","React","Component","ProfileStatus","profile","status","updateUserStatus","isOwner","editMode","setEditMode","localStatus","setLocalStatus","useEffect","activateEditMode","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","defaultValue","fontStyle","Contacts","Object","keys","contacts","map","key","contactTitle","contactValue","Contact","TableContainer","Paper","minWidth","Table","TableBody","TableRow","TableCell","scope","align","ProfileData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","elem","index","buttons","ProfileDataForm","saveProfile","setErrors","useForm","defaultValues","facebook","website","vk","twitter","instagram","youtube","github","mainLink","register","handleSubmit","catch","reject","size","placeholder","createStyles","backdrop","SimpleBackdrop","fullWidth","Backdrop","textAlign","ProfileInfo","savePhoto","photos","large","avatar","flexDirection","Input","target","files","length","info","Profile","xs","profileAPI","put","photoFile","formData","FormData","append","posts","message","likesCount","newPostText","getUserProfile","getUserStatus","file","getState","Error","Promise","profilePage","authorizedUserId","useParams","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","portionNumber","setPortionNumber","pagesCount","Math","ceil","pages","Array","from","_","k","portionCount","leftPortionPageNumber","rightPortionPageNumber","filter","p","height","media","User","user","followingInProgress","follow","unfollow","Card","CardActionArea","NavLink","to","CardMedia","image","CardContent","gutterBottom","CardActions","followed","disabled","some","select","search","borderRadius","shape","fade","palette","common","white","breakpoints","up","searchIcon","pointerEvents","inputRoot","inputInput","paddingLeft","usersSearchFormValidate","UsersSearchForm","onFilterChanged","term","friend","setSubmitting","handleChange","touched","handleBlur","isSubmitting","InputBase","input","inputProps","Select","MenuItem","updateObjectInArray","items","itemId","objPropName","newObjProps","i","usersAPI","users","totalUsersCount","isFetching","getUsersThunkCreator","page","totalCount","_followUnfollowFlow","apiMethod","actionCreator","getUsers","createSelector","usersPage","u","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","useStyle","left","flexWrap","cards","typography","center","Users","memo","followThunk","unfollowThunk","lg","UsersContainer","WrappedComponent","SuspendedChatPage","lazy","Suspense","fallback","initializeApp","app","createMuiTheme","main","secondary","preloader","ThemeProvider","CssBaseline","path","exact","ProfileContainer","dataDialog","rootReducer","combineReducers","action","newPost","postId","dialogsPage","body","newMessageBody","chat","chatReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","basename","process","document","getElementById","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","send","m","v1","array","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessage"],"mappings":"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","file":"static/js/main.f8028a84.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {UserType} from \"../types/typs\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"f4f2d23a-f41e-43a8-8b64-ece065a162b7\"\r\n    },\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: UserType[]\r\n    totalCount: number\r\n    error?: string\r\n}\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: string[]\r\n    resultCode: RC\r\n}","import clsx from \"clsx\"\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\"\r\nimport {Divider, Drawer, IconButton, List, ListItem, ListItemIcon, ListItemText} from \"@material-ui/core\"\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\"\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\"\r\nimport {drawerWidth} from \"./header\"\r\nimport {useHistory} from \"react-router-dom\"\r\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\"\r\nimport QuestionAnswerIcon from \"@material-ui/icons/QuestionAnswer\"\r\nimport GroupIcon from \"@material-ui/icons/Group\"\r\nimport {FC} from \"react\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        whiteSpace: \"nowrap\",\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create(\"width\", {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerClose: {\r\n        transition: theme.transitions.create(\"width\", {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        overflowX: \"hidden\",\r\n        width: theme.spacing(7) + 1,\r\n    },\r\n    toolbar: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-end\",\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n    },\r\n}));\r\n\r\ntype DrawerComponentPropsType = {\r\n    handleDrawerClose: () => void\r\n    open: boolean\r\n}\r\n\r\nexport const DrawerComponent: FC<DrawerComponentPropsType> = ({handleDrawerClose, open}) => {\r\n    const theme = useTheme();\r\n    const classes = useStyles(theme);\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Drawer\r\n            variant=\"permanent\"\r\n            className={clsx(classes.drawer, {\r\n                [classes.drawerOpen]: open,\r\n                [classes.drawerClose]: !open,\r\n            })}\r\n            classes={{\r\n                paper: clsx({\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                }),\r\n            }}\r\n        >\r\n            <div className={classes.toolbar}>\r\n                <IconButton onClick={handleDrawerClose}>\r\n                    {theme.direction === \"rtl\" ? <ChevronRightIcon/> : <ChevronLeftIcon/>}\r\n                </IconButton>\r\n            </div>\r\n            <Divider/>\r\n            <List>\r\n                <ListItem button onClick={() => history.push(\"/profile\")}>\r\n                    <ListItemIcon><AccountBoxIcon/></ListItemIcon>\r\n                    <ListItemText primary={\"Profile\"}/>\r\n                </ListItem>\r\n                <ListItem button onClick={() => history.push(\"/users\")}>\r\n                    <ListItemIcon><GroupIcon/></ListItemIcon>\r\n                    <ListItemText primary={\"Users\"}/>\r\n                </ListItem>\r\n                <ListItem button onClick={() => history.push(\"/chat\")}>\r\n                    <ListItemIcon><QuestionAnswerIcon/></ListItemIcon>\r\n                    <ListItemText primary={\"Chat\"}/>\r\n                </ListItem>\r\n                {/*                <ListItem button onClick={() => history.push(\"/dialogs\")}>\r\n                    <ListItemIcon><QuestionAnswerIcon/></ListItemIcon>\r\n                    <ListItemText primary={\"Dialogs\"}/>\r\n                </ListItem>*/}\r\n            </List>\r\n        </Drawer>\r\n    );\r\n};","import {instance, APIResponseType, ResultCodeForCaptcha, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(response => response.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha?: string) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptcha>>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n};","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n    }\r\n}","import {ResultCodeForCaptcha, ResultCodesEnum} from \"../api/api\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    errorMessage: null as string | null,\r\n    captchaUrl: undefined as string | undefined, // if null, then captcha is not required\r\n};\r\n\r\nexport const authReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n        case \"GET_CAPTCHA_URL_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n\r\n        case \"SET_ERROR_LOGIN\":\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: \"SET_USER_DATA\", payload: {userId, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({type: \"GET_CAPTCHA_URL_SUCCESS\", payload: {captchaUrl}} as const),\r\n    setErrorLogin: (errorMessage: string) => ({type: \"SET_ERROR_LOGIN\", errorMessage} as const),\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    const meData = await authAPI.me();\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        const {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha?: string): ThunkType => async (dispatch) => {\r\n    authAPI.login(email, password, rememberMe, captcha)\r\n        .then(loginData => {\r\n                if (loginData.resultCode === ResultCodesEnum.Success) {\r\n                    // success, get auth data\r\n                    dispatch(getAuthUserData());\r\n                } else {\r\n                    if (loginData.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n                        dispatch(getCaptchaUrl());\r\n                    }\r\n                    dispatch(actions.setErrorLogin(loginData.messages[0]));\r\n                }\r\n            }\r\n        )\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    const response = await authAPI.logout();\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n};","import {\r\n    Button, Dialog, DialogActions, Box, FormControlLabel,\r\n    DialogContent, DialogTitle, Typography\r\n} from \"@material-ui/core\";\r\nimport {useState, FC} from \"react\";\r\nimport {Formik, Form, Field, FormikErrors} from \"formik\";\r\nimport {Switch, TextField} from \"formik-material-ui\";\r\n\r\ntype LoginType = {\r\n    errorMessage: string | null,\r\n    captchaUrl: string | undefined\r\n    onSubmit: (data: LoginValuesType) => void\r\n}\r\nexport type LoginValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string | undefined\r\n}\r\n\r\nexport const Login: FC<LoginType> = ({errorMessage, onSubmit, captchaUrl}) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"outlined\" color=\"secondary\" onClick={handleClickOpen}>\r\n                Login\r\n            </Button>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Login</DialogTitle>\r\n                <DialogContent>\r\n                    <Typography variant={\"subtitle1\"}>Please use my email: </Typography>\r\n                    <Typography variant={\"h4\"}>grigory.yakovlev96@gmail.com</Typography>\r\n                    <Typography variant={\"subtitle1\"}>Please use my password: </Typography>\r\n                    <Typography variant={\"h4\"}>f4f2d23a</Typography>\r\n                    <Formik\r\n                        initialValues={{\r\n                            email: \"grigory.yakovlev96@gmail.com\",\r\n                            password: \"f4f2d23a\",\r\n                            rememberMe: false,\r\n                            captcha: undefined as string | undefined,\r\n                        }}\r\n                        validate={(values: LoginValuesType) => {\r\n                            const errors: FormikErrors<LoginValuesType> = {};\r\n                            if (!values.email) {\r\n                                errors.email = 'Required';\r\n                            } else if (\r\n                                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n                            ) {\r\n                                errors.email = 'Invalid email address';\r\n                            }\r\n                            return errors;\r\n                        }}\r\n                        onSubmit={onSubmit}\r\n                    >\r\n                        <Form>\r\n                            <Box margin={1}>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    name={\"email\"}\r\n                                    type={\"email\"}\r\n                                    label={\"Email\"}\r\n                                    helperText={\"email\"}\r\n                                />\r\n                            </Box>\r\n                            <Box margin={1}>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    type=\"password\"\r\n                                    label=\"Password\"\r\n                                    name=\"password\"\r\n                                />\r\n                            </Box>\r\n                            <Box margin={1}>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Field component={Switch} type=\"checkbox\" name=\"rememberMe\"/>\r\n                                    }\r\n                                    label=\"Remember me\"\r\n                                />\r\n                            </Box>\r\n                            <Box margin={1}>\r\n                                {captchaUrl && <img style={{display: \"inherit\"}} src={captchaUrl} alt=\"captcha\"/>}\r\n                                {captchaUrl &&\r\n                                <Field\r\n                                    component={TextField}\r\n                                    type=\"captcha\"\r\n                                    label=\"Captcha\"\r\n                                    name=\"captcha\"\r\n                                />}\r\n                                {errorMessage && <Box margin={2}><Typography variant={\"subtitle1\"} style={{\r\n                                    color: \"red\",\r\n                                    backgroundColor: \"white\"\r\n                                }}>{errorMessage}</Typography></Box>}\r\n                            </Box>\r\n                            <DialogActions>\r\n                                <Button onClick={handleClose}>\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button type={\"submit\"}>\r\n                                    Login\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Form>\r\n                    </Formik>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n","import {useDispatch, useSelector} from \"react-redux\"\r\nimport {login} from \"../../redux/auth-reducer\"\r\nimport {Login, LoginValuesType} from \"./login\"\r\nimport {AppStateType} from \"../../redux/redux-store\"\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nexport const LoginContainer = () => {\r\n\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n    const errorMessage = useSelector((state: AppStateType) => state.auth.errorMessage)\r\n    const history = useHistory()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (data: LoginValuesType) => {\r\n        dispatch(login(data.email, data.password, data.rememberMe, data.captcha))\r\n        history.push(\"/profile\")\r\n    }\r\n\r\n    return (\r\n        <Login errorMessage={errorMessage} onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    )\r\n}","import {FC, useState} from \"react\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport {AppBar, Toolbar, Typography, IconButton, Button} from \"@material-ui/core\"\r\nimport MenuIcon from \"@material-ui/icons/Menu\"\r\nimport {DrawerComponent} from \"./drawerComponent\"\r\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\"\r\nimport CloseIcon from \"@material-ui/icons/Close\"\r\nimport {LoginContainer} from \"../login/loginContainer\"\r\nimport {HeaderContainerPropsType} from \"./headerContainer\"\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nexport const drawerWidth = 200\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    hide: {\r\n        display: \"none\",\r\n    },\r\n    toolbar: {\r\n        justifyContent: \"space-between\",\r\n    },\r\n    title: {\r\n        marginLeft: 20,\r\n        color: \"black\",\r\n        cursor: \"pointer\",\r\n    },\r\n    login: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n    },\r\n    empty: {\r\n        flexGrow: 1,\r\n    },\r\n    name: {\r\n        marginRight: 12,\r\n    },\r\n}))\r\n\r\n\r\nexport const Header: FC<HeaderContainerPropsType> = ({isAuth, login, logout, darkMode, setDarkMode}) => {\r\n    const classes = useStyles()\r\n    const [open, setOpen] = useState(false)\r\n    const history = useHistory()\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={classes.appBar}\r\n            >\r\n                <Toolbar className={classes.toolbar}>\r\n                    {open\r\n                        ? <IconButton onClick={handleDrawerClose} color={\"inherit\"} edge=\"start\">\r\n                            <CloseIcon/>\r\n                        </IconButton>\r\n                        : <IconButton color=\"inherit\" onClick={handleDrawerOpen} edge=\"start\">\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                    }\r\n                    <Typography onClick={() => history.push(\"/\")} variant=\"h6\" noWrap className={classes.title}>\r\n                        Social network\r\n                    </Typography>\r\n                    <div className={classes.empty}/>\r\n                    <div className={classes.login}>\r\n                        <IconButton color={\"secondary\"} onClick={() => setDarkMode(!darkMode)}>\r\n                            <Brightness4Icon/>\r\n                        </IconButton>\r\n                        <div>\r\n                            {isAuth\r\n                                ? <div className={classes.login}>\r\n                                    <Typography className={classes.name} variant={\"h6\"}>{login}</Typography>\r\n                                    <Button color={\"secondary\"} variant=\"outlined\" onClick={logout}>Log out</Button>\r\n                                </div>\r\n                                : <LoginContainer/>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <DrawerComponent open={open} handleDrawerClose={handleDrawerClose}/>\r\n        </div>\r\n    )\r\n}\r\n","import {Header} from \"./header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport React, {FC} from \"react\";\r\n\r\nexport type HeaderContainerPropsType = {\r\n    logout: () => void,\r\n    isAuth: boolean,\r\n    login: string | null,\r\n    darkMode: boolean,\r\n    setDarkMode: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nconst HeaderContainer: FC<HeaderContainerPropsType> = ({isAuth, login, logout, darkMode, setDarkMode}) => {\r\n    return (\r\n        <Header isAuth={isAuth} login={login} logout={logout} darkMode={darkMode} setDarkMode={setDarkMode}/>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    logout,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderContainer);","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nexport type AppInitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n};\r\n\r\nexport const appReducer = (state = initialState, action: ActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst actions = {\r\n    initializedSuccess: () => ({type: \"INITIALIZED_SUCCESS\"} as const),\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport const initializeApp = (): ThunkType => async (dispatch) => {\r\n    const promise = dispatch(getAuthUserData());\r\n    promise.then(() => {\r\n        dispatch(actions.initializedSuccess());\r\n    })\r\n};","import {LinearProgress} from \"@material-ui/core\";\r\nimport {useTheme} from \"@material-ui/core/styles\";\r\n\r\nexport const Preloader = () => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <LinearProgress style={{\r\n            backgroundColor: \"#303030\",\r\n            marginBottom: theme.spacing(2),\r\n        }}/>\r\n    );\r\n};","export default __webpack_public_path__ + \"static/media/login-key-flat-isometric_126523-1865.08ec80bf.jpg\";","import welcome from \"../../../assets/images/login-key-flat-isometric_126523-1865.jpg\"\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\"\r\nimport {Grid, Typography} from \"@material-ui/core\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    item: {\r\n        margin: theme.spacing(2),\r\n    },\r\n    img: {\r\n        width: \"100%\",\r\n    },\r\n}))\r\n\r\nexport const Welcome = () => {\r\n    const theme = useTheme()\r\n    const classes = useStyles(theme)\r\n\r\n    return (\r\n        <Grid container className={classes.root}>\r\n            <Grid item className={classes.item} sm={3}>\r\n                <img className={classes.img} src={welcome} alt=\"welcome\"/>\r\n            </Grid>\r\n            <Grid item className={classes.item} sm={8}>\r\n                <Typography variant={\"h4\"}>\r\n                    Добрый день!\r\n                </Typography>\r\n                <br/>\r\n                <Typography variant={\"h6\"}>\r\n                    Приветствую вас на моём презентационном сайте. Здесь предусмотренна авторизация пользователя через email и пароль.\r\n                    Но не беспокойтесь, регистрироваться не придётся, достаточно просто подтвердить уже введённые данные в Login форме.\r\n                    После этого вкладка Chat будет доступной (без входа произойдёт перенаправление на эту страницу).\r\n                    <br/>\r\n                    <br/>\r\n                    Кроме того, рядом с кнопкой Login, есть возможность сменить тему с тёмной на светлую.\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","\r\n\r\nexport const NotFound = () => {\r\n    return (\r\n        <div>Not Found</div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    state = {\r\n        error: false\r\n    };\r\n\r\n    componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n        this.setState({error: true});\r\n        console.log(errorInfo)\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <img src=\"https://miro.medium.com/max/700/1*v4dLIlWpJkCiSDKv7xguLA.png\" alt=\"error\"/>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}","import {Preloader} from \"../../common/preloader/preloader\";\r\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {ProfileType} from \"../../../../types/typs\";\r\nimport {Box, Typography} from \"@material-ui/core\"\r\n\r\ntype ProfileStatusType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean,\r\n}\r\n\r\nexport const ProfileStatus: React.FC<ProfileStatusType> = ({profile, status, updateUserStatus, isOwner}) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [localStatus, setLocalStatus] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        setLocalStatus(status);\r\n    }, [status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateUserStatus(localStatus as string);\r\n    };\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value);\r\n    };\r\n\r\n    if (!profile) return <Preloader/>;\r\n    return (\r\n        <>\r\n            <Typography onDoubleClick={isOwner ? () => activateEditMode() : undefined} variant={\"h6\"}>Status: </Typography>\r\n            {!editMode\r\n                ? <div>\r\n                    <div>\r\n                        <Box fontStyle={\"italic\"} onDoubleClick={isOwner ? () => activateEditMode() : undefined}>{localStatus || \"No status\"}</Box>\r\n                    </div>\r\n\r\n                </div>\r\n                : <div>\r\n                    <input onChange={onChange}\r\n                           autoFocus={true} onBlur={() => deactivateEditMode()}\r\n                           type=\"text\" defaultValue={localStatus}/>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n};\r\n","import {ContactsType, ProfileType} from \"../../../../types/typs\"\r\nimport {FC} from \"react\"\r\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableRow} from \"@material-ui/core\"\r\n\r\nexport const Contacts: FC<{ profile: ProfileType }> = ({profile}) => {\r\n\r\n    return (\r\n        <>\r\n            {\r\n                Object.keys(profile.contacts)\r\n                    .map(key =>\r\n                        <Contact key={key} contactTitle={key}\r\n                                 contactValue={profile.contacts[key as keyof ContactsType]}/>,\r\n                    )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\ntype ContactsPropType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: FC<ContactsPropType> = ({contactTitle, contactValue}) => {\r\n    // if (!contactValue) return null\r\n    return (\r\n        <TableContainer component={Paper} style={{minWidth: 327}}>\r\n            <Table>\r\n                <TableBody>\r\n                    <TableRow>\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                            {contactTitle}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">{contactValue}</TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}","import {ProfileType} from \"../../../../types/typs\"\r\nimport {FC} from \"react\"\r\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableRow} from \"@material-ui/core\"\r\n\r\n\r\ntype ProfileDataTypes = {\r\n    profile: ProfileType\r\n}\r\n\r\nexport const ProfileData: FC<ProfileDataTypes> = ({profile}) => {\r\n\r\n    const data = [\r\n        [\"Full name:\", profile.fullName], [\"Looking for a job:\", profile.lookingForAJob ? \"yes\" : \"no\"],\r\n        [\"My professional skills:\", profile.lookingForAJobDescription], [\"About me:\", profile.aboutMe],\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <TableContainer component={Paper} style={{minWidth: 327}}>\r\n                <Table>\r\n                    <TableBody>\r\n                        {\r\n                            data.map((elem, index) =>\r\n                                <TableRow key={index}>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {elem[0]}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">{elem[1]}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}","import {useForm} from \"react-hook-form\"\r\nimport React, {FC, useState} from \"react\"\r\nimport {ProfileType} from \"../../../../types/typs\"\r\nimport {Box, Button, Paper, Table, TableBody, TableCell, TableContainer, TableRow, Typography} from \"@material-ui/core\"\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\"\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    handleClose: () => void\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    title: {\r\n        margin: theme.spacing(3),\r\n    },\r\n    errors: {\r\n        color: \"red\",\r\n    },\r\n    buttons: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n}))\r\n\r\n\r\nexport const ProfileDataForm: FC<ProfileDataFormPropsType> = ({profile, saveProfile, handleClose}) => {\r\n    const [errors, setErrors] = useState([])\r\n    const {register, handleSubmit} = useForm({\r\n        defaultValues: {\r\n            fullName: profile.fullName,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            aboutMe: profile.aboutMe,\r\n            contacts: {\r\n                facebook: profile.contacts.facebook,\r\n                website: profile.contacts.website,\r\n                vk: profile.contacts.vk,\r\n                twitter: profile.contacts.twitter,\r\n                instagram: profile.contacts.instagram,\r\n                youtube: profile.contacts.youtube,\r\n                github: profile.contacts.github,\r\n                mainLink: profile.contacts.mainLink,\r\n            },\r\n        },\r\n    })\r\n    const theme = useTheme()\r\n    const classes = useStyles(theme)\r\n\r\n    const onSubmit = (data: ProfileType) => {\r\n        saveProfile(data)\r\n            .then(() => {\r\n                handleClose()\r\n                setErrors([])\r\n            })\r\n            .catch(reject => setErrors(reject))\r\n\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <TableContainer component={Paper}>\r\n                <Typography className={classes.title} variant={\"h4\"} align={\"center\"}>Edit profile info</Typography>\r\n                {errors.map(elem =>\r\n                    <Typography align={\"center\"} className={classes.errors} key={elem}>\r\n                        {elem}\r\n                    </Typography>)\r\n                }\r\n                <Table size=\"small\">\r\n                    <TableBody>\r\n                        <TableRow>\r\n                            <TableCell>\r\n                                Full name\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <input type=\"text\" placeholder={\"Full name\"}{...register(\"fullName\")}/>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell>\r\n                                Looking for a job\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <input type=\"checkbox\" {...register(\"lookingForAJob\")}/>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell>\r\n                                My professional skills\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <textarea\r\n                                    placeholder={\"My professional skills\"}{...register(\"lookingForAJobDescription\")}/>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell>\r\n                                About me\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <textarea placeholder={\"About me\"}{...register(\"aboutMe\")}/>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell>\r\n                                <Typography align={\"center\"}>Contacts</Typography>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        {\r\n                            Object.keys(profile.contacts)\r\n                                .map(key =>\r\n                                    <TableRow key={key}>\r\n                                        <TableCell>\r\n                                            {key}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"right\">\r\n                                            <input type=\"text\"\r\n                                                   placeholder={key}{...register(`contacts.${key}` as any)}/>\r\n                                        </TableCell>\r\n                                    </TableRow>,\r\n                                )\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n                <Box margin={2} className={classes.buttons}>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                    <Button type={\"submit\"}>Send</Button>\r\n                </Box>\r\n            </TableContainer>\r\n        </form>\r\n    )\r\n}","import React, {FC} from \"react\"\r\nimport Backdrop from \"@material-ui/core/Backdrop\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport {makeStyles, createStyles, Theme} from \"@material-ui/core/styles\"\r\nimport {ProfileDataForm} from \"../profileDataForm\"\r\nimport {ProfileType} from \"../../../../../types/typs\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        backdrop: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            color: \"#fff\",\r\n        },\r\n    }),\r\n)\r\n\r\nexport const SimpleBackdrop: FC<{ profile: ProfileType, saveProfile: (profile: ProfileType) => Promise<any> }> = ({\r\n                                                                                                                      profile,\r\n                                                                                                                      saveProfile,\r\n                                                                                                                  }) => {\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    const handleOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button fullWidth variant=\"contained\" onClick={handleOpen}>\r\n                Edit profile info\r\n            </Button>\r\n            <Backdrop className={classes.backdrop} open={open}>\r\n                <ProfileDataForm profile={profile} saveProfile={saveProfile} handleClose={handleClose}/>\r\n            </Backdrop>\r\n        </>\r\n    )\r\n}\r\n","import {Preloader} from \"../../common/preloader/preloader\"\r\nimport {ProfileStatus} from \"./profileStatus\"\r\nimport avatar from \"../../../../assets/images/avatar.svg\"\r\nimport {ChangeEvent, FC, useState} from \"react\"\r\nimport {ProfileDataForm} from \"./profileDataForm\"\r\nimport {Box, Grid, Input, Typography} from \"@material-ui/core\"\r\nimport {ProfileType} from \"../../../../types/typs\"\r\nimport {Contacts} from \"./contacts\"\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\"\r\nimport {ProfileData} from \"./profileData\"\r\nimport {SimpleBackdrop} from \"./editProfileInfo/editProfileInfo\"\r\n\r\ntype ProfileInfoTypes = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n    },\r\n    title: {\r\n        textAlign: \"right\",\r\n        margin: theme.spacing(1),\r\n    },\r\n    img: {\r\n        width: \"100%\",\r\n    },\r\n}))\r\n\r\nexport const ProfileInfo: FC<ProfileInfoTypes> = ({\r\n                                                      profile,\r\n                                                      status,\r\n                                                      updateUserStatus,\r\n                                                      isOwner,\r\n                                                      savePhoto,\r\n                                                      saveProfile,\r\n                                                  }) => {\r\n\r\n    const theme = useTheme()\r\n    const classes = useStyles(theme)\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    if (!profile) return <Preloader/>\r\n    return (\r\n        <Grid container spacing={5} className={classes.root}>\r\n            <Grid item>\r\n                <img src={profile.photos.large || avatar} alt=\"img\"/>\r\n                <ProfileStatus profile={profile} status={status} updateUserStatus={updateUserStatus} isOwner={isOwner}/>\r\n                <ProfileData profile={profile}/>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography className={classes.title} variant={\"h5\"}>Contacts</Typography>\r\n                <Contacts profile={profile}/>\r\n                {isOwner && <>\r\n                    <Box margin={1} display={\"flex\"} flexDirection={\"column\"} justifyContent={\"center\"}>\r\n                        <Typography align={\"center\"}>Change avatar</Typography>\r\n                        <Input type={\"file\"} onChange={mainPhotoSelected}/>\r\n                    </Box>\r\n                    <Box margin={1} display={\"flex\"} justifyContent={\"center\"}>\r\n                        <SimpleBackdrop profile={profile} saveProfile={saveProfile}/>\r\n                    </Box>\r\n                </>}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","import {ProfileInfo} from \"./profileInfo/profileInfo\";\r\nimport {Grid, List, ListItem, ListItemIcon, ListItemText, Paper, Typography} from \"@material-ui/core\"\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {Preloader} from \"../common/preloader/preloader\";\r\nimport {ProfileType} from \"../../../types/typs\";\r\nimport React, {FC} from \"react\";\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\r\nimport StorageIcon from '@material-ui/icons/Storage';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    info: {\r\n        margin: theme.spacing(2),\r\n        padding: theme.spacing(2)\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(2),\r\n    },\r\n    root: {\r\n        margin: theme.spacing(2),\r\n        padding: theme.spacing(2),\r\n        flexDirection: \"row\"\r\n    },\r\n}));\r\n\r\ntype ProfilePropsTypes = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport const Profile: FC<ProfilePropsTypes> = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\r\n    const theme = useTheme();\r\n    const classes = useStyles(theme);\r\n\r\n    if (!profile) return <Preloader/>;\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item sm={6} xs={12} >\r\n                <Paper className={classes.info}>\r\n                    <ProfileInfo profile={profile} status={status} updateUserStatus={updateUserStatus} isOwner={isOwner}\r\n                                 savePhoto={savePhoto}\r\n                                 saveProfile={saveProfile}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item sm={6} xs={12}>\r\n                <Paper className={classes.root}>\r\n                    <Typography variant={\"h6\"}>\r\n                        После авторизации, вы можете изменить:\r\n                        <List>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <FaceIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText>Аватарку</ListItemText>\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <TextFormatIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText>Статус (дважды кликнув на него, либо на заголовок)</ListItemText>\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <StorageIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText>Личные данные и контакты</ListItemText>\r\n                            </ListItem>\r\n                        </List>\r\n                    </Typography>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};","import {PhotosType, ProfileType} from \"../types/typs\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\r\n    }\r\n};","import {PhotosType, PostType, ProfileType} from \"../types/typs\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 11},\r\n        {id: 2, message: \"It's my first post\", likesCount: 22},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n    newPostText: \"\",\r\n};\r\n\r\nexport type ProfileInitialStateType = typeof initialState;\r\n\r\nexport const profileReducer = (state = initialState, action: ActionsType): ProfileInitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_POST\":\r\n            const newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n\r\n        case \"SET_USER_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n\r\n        case \"SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n\r\n        case \"DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId),\r\n            };\r\n\r\n        case \"SAVE_PHOTO_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    photos: action.photos\r\n                } as ProfileType\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    addPost: (newPostText: string) => ({type: \"ADD_POST\", newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: \"SET_USER_PROFILE\", profile} as const),\r\n    setStatus: (status: string) => ({type: \"SET_STATUS\", status} as const),\r\n    deletePost: (postId: number) => ({type: \"DELETE_POST\", postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: \"SAVE_PHOTO_SUCCESS\", photos} as const),\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n};\r\n\r\nexport const getUserStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n};\r\n\r\nexport const updateUserStatus = (status: string): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const data = await profileAPI.saveProfile(profile);\r\n    if (data.resultCode === 0) {\r\n        if (userId !== null) {\r\n            await dispatch(getUserProfile(userId));\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        return Promise.reject(data.messages);\r\n    }\r\n};","import {Profile} from \"./profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {FC, useEffect} from \"react\";\r\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from \"../../../redux/profile-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {ProfileType} from \"../../../types/typs\";\r\n\r\ntype ProfileContainerTypes = MapStateToPropsTypes & MapDispatchToPropsTypes\r\n\r\nconst ProfileContainer: FC<ProfileContainerTypes> = ({\r\n                              profile, status, authorizedUserId,\r\n                              getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile,\r\n                          }) => {\r\n\r\n    let userId = useParams<PathParamsType>().userId || authorizedUserId || 16528;\r\n\r\n    useEffect(() => {\r\n        getUserProfile(+userId);\r\n        getUserStatus(+userId);\r\n    }, [getUserStatus, getUserProfile, userId]);\r\n\r\n    return (\r\n        <Profile profile={profile} status={status} updateUserStatus={updateUserStatus}\r\n                 isOwner={userId === authorizedUserId} savePhoto={savePhoto}\r\n                 saveProfile={saveProfile}\r\n        />\r\n    );\r\n};\r\n\r\ntype MapStateToPropsTypes = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToPropsTypes = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileContainer);","import React, {useState} from \"react\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n    }\r\n})\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    portionSize?: number,\r\n}\r\n\r\nexport const Paginator: React.FC<PropsType> = ({\r\n                                               totalItemsCount,\r\n                                               pageSize,\r\n                                               currentPage,\r\n                                               onPageChanged,\r\n                                               portionSize = 10\r\n                                           }) => {\r\n    const [portionNumber, setPortionNumber] = useState(1);\r\n    const classes = useStyles()\r\n\r\n    const pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    const pages: number[] = Array.from({length: pagesCount}, (_, k) => k + 1);\r\n    const portionCount = Math.ceil(pagesCount / portionSize);\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    const rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {portionNumber > 1 &&\r\n            <div>\r\n                <IconButton onClick={() => {\r\n                    setPortionNumber(1)\r\n                }}>\r\n                    <FirstPageIcon/>\r\n                </IconButton>\r\n                <IconButton onClick={() => {\r\n                    setPortionNumber(portionNumber - 1)\r\n                }}>\r\n                    <NavigateBeforeIcon/>\r\n                </IconButton>\r\n            </div>\r\n            }\r\n            {\r\n                pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map(p => (p === currentPage)\r\n                        ? <Button key={p} variant={\"outlined\"}\r\n                                  onClick={() => onPageChanged(p)}\r\n                        >{p}</Button>\r\n                        : <Button key={p} onClick={() => onPageChanged(p)}>{p}</Button>\r\n                    )\r\n            }\r\n            {\r\n                portionCount > portionNumber &&\r\n                <>\r\n                    <IconButton onClick={() => {\r\n                        setPortionNumber(portionNumber + 1)\r\n                    }}>\r\n                        <NavigateNextIcon/>\r\n                    </IconButton>\r\n                    <IconButton onClick={() => {\r\n                        setPortionNumber(portionCount)\r\n                    }}>\r\n                        <LastPageIcon/>\r\n                    </IconButton>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n};","import {NavLink} from \"react-router-dom\";\r\nimport avatar from \"../../../assets/images/avatar.svg\";\r\nimport {Button, CardActions, Grid} from \"@material-ui/core\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {FC} from \"react\";\r\nimport {UserType} from \"../../../types/typs\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 270,\r\n        height: 370,\r\n        margin: \"8px\",\r\n    },\r\n    media: {\r\n        height: \"200px\",\r\n    },\r\n});\r\n\r\ntype UserPropsType = {\r\n    unfollow: (userId: number) => void,\r\n    follow: (userId: number) => void,\r\n    followingInProgress: number[],\r\n    user: UserType\r\n}\r\n\r\nexport const User: FC<UserPropsType> = ({user, followingInProgress, follow, unfollow}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid item>\r\n            <Card className={classes.root}>\r\n                <CardActionArea component={NavLink} to={`/profile/${user.id}`}>\r\n                    <CardMedia\r\n                        className={classes.media}\r\n                        image={user.photos.large ? user.photos.large : avatar}\r\n                        title={user.name}\r\n                    />\r\n                    <CardContent>\r\n                        <Typography noWrap gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Name:<br/>{user.name}\r\n                        </Typography>\r\n                        <Typography noWrap variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Status: {user.status || \"No status\"}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                    {user.followed\r\n                        ? <Button variant={\"contained\"} fullWidth size=\"small\"\r\n                                  disabled={followingInProgress.some(userId => userId === user.id)}\r\n                                  onClick={() => unfollow(user.id)}\r\n                        >Unfollow</Button>\r\n                        : <Button variant={\"contained\"} fullWidth size=\"small\"\r\n                                  disabled={followingInProgress.some(userId => userId === user.id)}\r\n                                  onClick={() => follow(user.id)}\r\n                        >Follow</Button>\r\n                    }\r\n                </CardActions>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n};","import {Form, Formik, Field, FormikHelpers} from \"formik\"\r\nimport {Button, InputBase, MenuItem} from \"@material-ui/core\"\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\nimport {fade, makeStyles, useTheme} from \"@material-ui/core/styles\"\r\nimport {FilterType} from \"../../../redux/users-reducer\"\r\nimport {FC} from \"react\"\r\nimport {Select} from \"formik-material-ui\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: theme.spacing(2),\r\n        width: 500,\r\n    },\r\n    select: {\r\n        width: 141,\r\n    },\r\n    search: {\r\n        position: \"relative\",\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        \"&:hover\": {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginRight: theme.spacing(2),\r\n        marginLeft: 0,\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            marginLeft: theme.spacing(3),\r\n            width: \"auto\",\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: \"100%\",\r\n        position: \"absolute\",\r\n        pointerEvents: \"none\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    inputRoot: {\r\n        color: \"inherit\",\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create(\"width\"),\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"20ch\",\r\n        },\r\n    },\r\n}))\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    return {}\r\n}\r\n\r\ntype UsersSearchFormPropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\ntype FormType = {\r\n    term: string\r\n    friend: \"true\" | \"false\" | \"null\"\r\n}\r\n\r\nexport const UsersSearchForm: FC<UsersSearchFormPropsType> = ({onFilterChanged}) => {\r\n    const classes = useStyles(useTheme())\r\n\r\n    const onSubmit = (values: FormType, {setSubmitting}: FormikHelpers<FormType>) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false,\r\n        }\r\n        onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Formik\r\n                initialValues={{term: \"\", friend: \"null\"}}\r\n                onSubmit={onSubmit}\r\n                validate={usersSearchFormValidate}\r\n            >\r\n                {({\r\n                      values,\r\n                      errors,\r\n                      touched,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      handleSubmit,\r\n                      isSubmitting,\r\n                      /* and other goodies */\r\n                  }) => (\r\n                    <Form>\r\n                        <div className={classes.search}>\r\n                            <div className={classes.searchIcon}>\r\n                                <SearchIcon/>\r\n                            </div>\r\n                            <Field\r\n                                component={InputBase}\r\n                                placeholder=\"Search…\"\r\n                                classes={{\r\n                                    root: classes.inputRoot,\r\n                                    input: classes.inputInput,\r\n                                }}\r\n                                inputProps={{\"aria-label\": \"search\"}}\r\n                                id={\"term\"}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.term}\r\n                            />\r\n                            <Field\r\n                                className={classes.select}\r\n                                component={Select}\r\n                                type=\"text\"\r\n                                name=\"friend\"\r\n                                variant=\"standard\"\r\n                            >\r\n                                <MenuItem value={\"null\"}>All</MenuItem>\r\n                                <MenuItem value={\"true\"}>Only followed</MenuItem>\r\n                                <MenuItem value={\"false\"}>Only unfollowed</MenuItem>\r\n                            </Field>\r\n                            <Button type=\"submit\" disabled={isSubmitting}>\r\n                                Submit\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}","\r\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((i: any) => {\r\n        if (i[objPropName] === itemId) {\r\n            return {...i, ...newObjProps};\r\n        }\r\n        return i;\r\n    });\r\n};","import {GetItemsType, instance, APIResponseType} from \"./api\"\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10, term: string = \"\", friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`\r\n            + (friend === null ? \"\" : `&friend=${friend}`))\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<APIResponseType>(`follow/${userId}`).then(response => response.data)\r\n    },\r\n}","import {updateObjectInArray} from \"../utils/object-helpers\"\r\nimport {UserType} from \"../types/typs\"\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\"\r\nimport {Dispatch} from \"redux\"\r\nimport {usersAPI} from \"../api/users-api\"\r\nimport {APIResponseType} from \"../api/api\"\r\n\r\nconst initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 12,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as number[], // array of users ids\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as null | boolean\r\n    },\r\n}\r\n\r\nexport type UsersInitialState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\n\r\nexport const usersReducer = (state = initialState, action: ActionsTypes): UsersInitialState => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true}),\r\n            }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false}),\r\n            }\r\n\r\n        case \"SET_USERS\":\r\n            return {...state, users: action.users}\r\n\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case \"SET_TOTAL_USERS_COUNT\":\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case \"SET_FILTER\":\r\n            return {...state, filter: action.payload}\r\n\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId),\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: \"FOLLOW\", userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: \"UNFOLLOW\", userId} as const),\r\n    setUsers: (users: UserType[]) => ({type: \"SET_USERS\", users} as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: \"SET_CURRENT_PAGE\",\r\n        currentPage,\r\n    } as const),\r\n    setFilter: (filter: FilterType) => ({\r\n        type: \"SET_FILTER\",\r\n        payload: filter,\r\n    } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: \"SET_TOTAL_USERS_COUNT\",\r\n        totalUsersCount,\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: \"TOGGLE_IS_FETCHING\",\r\n        isFetching,\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: \"TOGGLE_IS_FOLLOWING_PROGRESS\",\r\n        isFetching,\r\n        userId,\r\n    } as const),\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\nexport const getUsersThunkCreator = (page: number, pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(page))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        const response = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(response.items))\r\n        dispatch(actions.setTotalUsersCount(response.totalCount))\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    const response = await apiMethod(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const followThunk = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow, actions.followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollowThunk = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow, actions.unfollowSuccess)\r\n    }\r\n}","import {createSelector} from \"reselect\"\r\nimport {AppStateType} from \"../redux-store\"\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n        return users.filter(u => true)\r\n    })\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}","import {Paginator} from \"../common/paginator/paginator\"\r\nimport {User} from \"./user\"\r\nimport {Grid, List, ListItem, ListItemIcon, ListItemText, Paper, Typography} from \"@material-ui/core\"\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\"\r\nimport React, {useEffect} from \"react\"\r\nimport {UsersSearchForm} from \"./usersSearchForm\"\r\nimport {FilterType, getUsersThunkCreator, followThunk, unfollowThunk} from \"../../../redux/users-reducer\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {\r\n    getCurrentPage, getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsers, getUsersFilter,\r\n} from \"../../../redux/selectors/usersSelectors\"\r\nimport SyncAltIcon from '@material-ui/icons/SyncAlt';\r\nimport EmojiPeopleIcon from '@material-ui/icons/EmojiPeople';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    left: {\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        flexWrap: \"wrap\",\r\n    },\r\n    cards: {\r\n        margin: 20,\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        justifyContent: \"center\",\r\n    },\r\n    typography: {\r\n        margin: theme.spacing(2),\r\n        padding: theme.spacing(2),\r\n        flexDirection: \"row\"\r\n    },\r\n    center: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n    }\r\n}))\r\n\r\nexport const Users = React.memo(() => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const pageSize = useSelector(getPageSize)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n    const theme = useTheme()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersThunkCreator(currentPage, pageSize, filter))\r\n    }, [currentPage, dispatch, filter, pageSize])\r\n\r\n    const onPageChanged = (currentPage: number) => {\r\n        dispatch(getUsersThunkCreator(currentPage, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(getUsersThunkCreator(1, pageSize, filter))\r\n    }\r\n    const follow = (userId: number) => {\r\n        dispatch(followThunk(userId))\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollowThunk(userId))\r\n    }\r\n    const classes = useStyle(theme)\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item className={classes.left} lg={10} sm={12}>\r\n                <Grid item className={classes.center}>\r\n                    <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n                </Grid>\r\n                <Grid item className={classes.center}>\r\n                    <Paginator totalItemsCount={totalUsersCount} pageSize={pageSize} currentPage={currentPage}\r\n                               onPageChanged={onPageChanged}/>\r\n                </Grid>\r\n                <Grid item className={classes.cards} sm={12}>\r\n                    {\r\n                        users.map((user, index) => (\r\n                                <User key={index} user={user} followingInProgress={followingInProgress}\r\n                                      follow={follow} unfollow={unfollow}/>\r\n                            ),\r\n                        )\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item lg={2} sm={12}>\r\n                <Paper className={classes.typography}>\r\n                    <Typography variant={\"h6\"}>\r\n                        Есть возможность поиска людей\r\n                        <List>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <EmojiPeopleIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText>По имени</ListItemText>\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <SyncAltIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText>По значению follow / unfollow</ListItemText>\r\n                            </ListItem>\r\n                        </List>\r\n                    </Typography>\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n})","import {useSelector} from \"react-redux\"\r\nimport {Users} from \"./users\"\r\nimport {Preloader} from \"../common/preloader/preloader\"\r\nimport {getIsFetching} from \"../../../redux/selectors/usersSelectors\"\r\n\r\nexport const UsersContainer = () => {\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return (\r\n        <>\r\n            {isFetching ? <Preloader/> : undefined}\r\n            <Users/>\r\n        </>\r\n    )\r\n}","import {FC, lazy, Suspense, useState} from \"react\"\r\nimport {Route, Switch} from \"react-router-dom\"\r\nimport HeaderContainer from \"../header/headerContainer\"\r\nimport {useEffect} from \"react\"\r\nimport {connect} from \"react-redux\"\r\nimport {initializeApp} from \"../../redux/app-reducer\"\r\nimport {Preloader} from \"../content/common/preloader/preloader\"\r\nimport {Welcome} from \"../content/welcome/welcome\"\r\nimport {NotFound} from \"../content/notFound/notFound\"\r\nimport ErrorBoundary from \"../content/errorBoundary/errorBoundary\"\r\nimport {ThemeProvider} from \"@material-ui/core/styles\"\r\nimport {CssBaseline, Grid} from \"@material-ui/core\"\r\nimport {createMuiTheme} from \"@material-ui/core/styles\"\r\nimport ProfileContainer from \"../content/profile/profileContainer\"\r\nimport {UsersContainer} from \"../content/users/usersContainer\"\r\nimport {AppStateType} from \"../../redux/redux-store\"\r\nimport {withSuspense} from \"../../hoc/withSuspense\"\r\n\r\n// const DialogsContainer = lazy(() => import(\"../content/dialogs/dialogs-container\"))\r\nconst Chat = lazy(() => import(\"../content/chat/Chat\"))\r\n// for lazy loading\r\n// const SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedChatPage = withSuspense(Chat)\r\n\r\nconst App: FC<MapStatePropsType & DispatchPropsType> = ({initialized, initializeApp}) => {\r\n    const [darkMode, setDarkMode] = useState(true)\r\n    useEffect(() => {\r\n        initializeApp()\r\n    }, [initializeApp])\r\n\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            type: darkMode ? \"dark\" : \"light\",\r\n            primary: {\r\n                main: \"#FFFFFFFF\",\r\n            },\r\n            secondary: {\r\n                main: \"#000000FF\",\r\n            },\r\n        },\r\n    })\r\n\r\n    const preloader = (\r\n        <div className={\"app-wrapper\"}>\r\n            <Preloader/>\r\n        </div>\r\n    )\r\n\r\n    if (!initialized) return preloader\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline/>\r\n            <Grid container direction={\"column\"}>\r\n                <ErrorBoundary>\r\n                    <Grid item>\r\n                        <HeaderContainer darkMode={darkMode} setDarkMode={setDarkMode}/>\r\n                    </Grid>\r\n                    <Grid item style={{margin: 56, padding: 24}}>\r\n                        <Suspense fallback={preloader}>\r\n                            <Switch>\r\n                                <Route path={\"/\"} exact component={Welcome}/>\r\n                                <Route path={\"/profile/:userId?\"} component={ProfileContainer}/>\r\n                                {/*<Route path={\"/dialogs\"} component={SuspendedDialogs}/>*/}\r\n                                <Route path={\"/users\"} component={UsersContainer}/>\r\n                                <Route path={\"/chat\"} component={SuspendedChatPage}/>\r\n                                <Route component={NotFound}/>\r\n                            </Switch>\r\n                        </Suspense>\r\n                    </Grid>\r\n                </ErrorBoundary>\r\n            </Grid>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    initializeApp,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import React, {ComponentType} from \"react\"\r\nimport {Preloader} from \"../components/content/common/preloader/preloader\";\r\n\r\nfunction withSuspense<WrappedComponentProps>(WrappedComponent: ComponentType<WrappedComponentProps>) {\r\n    return (props: WrappedComponentProps) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n\r\nexport {withSuspense};","import avatar from \"../assets/images/avatar.svg\"\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    dataDialog: [\r\n        {id: 1, name: \"Dimych\", img: avatar},\r\n        {id: 2, name: \"Andrey\", img: avatar},\r\n        {id: 3, name: \"Sveta\", img: avatar},\r\n        {id: 4, name: \"Sasha\", img: avatar},\r\n        {id: 5, name: \"Victor\", img: avatar},\r\n        {id: 6, name: \"Valera\", img: avatar},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"},\r\n    ],\r\n};\r\n\r\nexport const dialogsReducer = (state = initialState, action: DialogsActionsTypes): DialogsInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SEND_MESSAGE\":\r\n            const body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}],\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport type DialogsActionsTypes = InferActionsTypes<typeof dialogsActions>\r\n\r\nexport const dialogsActions = {\r\n    sendMessage: (newMessageBody: string) => ({type: \"SEND_MESSAGE\", newMessageBody} as const)\r\n}","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\"\r\nimport {profileReducer} from \"./profile-reducer\"\r\nimport {dialogsReducer} from \"./dialogs-reducer\"\r\nimport {usersReducer} from \"./users-reducer\"\r\nimport {authReducer} from \"./auth-reducer\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport {appReducer} from \"./app-reducer\"\r\nimport {chatReducer} from \"./chat-reducer\"\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    chat: chatReducer,\r\n})\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const store =\r\n    createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app/app';\r\nimport {store} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\nimport {BrowserRouter} from \"react-router-dom\"\r\n\r\nReactDOM.render(\r\n    <>\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </>,\r\n    document.getElementById('root')\r\n);","export default __webpack_public_path__ + \"static/media/avatar.4084d3ab.svg\";","type MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\n\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst subscribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 5000)\r\n}\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n}\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subscribers['messages-received'] = []\r\n        subscribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n","import {BaseThunkType, InferActionsTypes} from \"./redux-store\"\r\nimport {Dispatch} from \"redux\"\r\nimport {chatAPI, ChatMessageAPIType, StatusType} from \"../api/chat-api\"\r\nimport {v1} from \"uuid\"\r\n\r\ntype ChatMessageType = ChatMessageAPIType & { id: string }\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: \"pending\" as StatusType,\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/chat/MESSAGES_RECEVIED\":\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map(m => ({...m, id: v1()}))]\r\n                    .filter((m, index, array) => index >= array.length - 100),\r\n            }\r\n        case \"SN/chat/STATUS_CHANGED\":\r\n            return {\r\n                ...state,\r\n                status: action.payload.status,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: \"SN/chat/MESSAGES_RECEVIED\", payload: {messages},\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: \"SN/chat/STATUS_CHANGED\", payload: {status},\r\n    } as const),\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe(\"messages-received\", newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe(\"status-changed\", statusChangedHandlerCreator(dispatch))\r\n\r\n}\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe(\"messages-received\", newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe(\"status-changed\", statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>"],"sourceRoot":""}