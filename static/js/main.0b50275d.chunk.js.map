{"version":3,"sources":["components/content/addMessageForm/addMessageForm.tsx","redux/dialogs-reducer.ts","api/api.ts","components/header/drawerComponent.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/login/login.tsx","components/login/loginContainer.tsx","components/header/header.tsx","components/header/headerContainer.tsx","redux/app-reducer.ts","components/content/common/preloader/preloader.tsx","assets/images/login-key-flat-isometric_126523-1865.jpg","components/content/welcome/welcome.tsx","components/content/notFound/notFound.tsx","components/content/errorBoundary/errorBoundary.tsx","components/content/profile/profileInfo/profileStatus.tsx","components/content/profile/profileInfo/profileDataForm.tsx","components/content/profile/profileInfo/profileInfo.tsx","api/profile-api.ts","redux/profile-reducer.ts","components/content/profile/myPosts/posts/post.tsx","components/content/profile/myPosts/myPosts.tsx","components/content/profile/myPosts/myPostsContainer.tsx","components/content/profile/profile.tsx","components/content/profile/profileContainer.tsx","components/content/common/paginator/paginator.tsx","components/content/users/user.tsx","components/content/users/usersSearchForm.tsx","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","redux/selectors/usersSelectors.ts","components/content/users/users.tsx","components/content/users/usersContainer.tsx","components/app/app.tsx","hoc/withSuspense.tsx","redux/redux-store.ts","index.tsx","assets/images/avatar.svg"],"names":["AddMessageForm","sendMessage","maxLength","useForm","register","handleSubmit","errors","formState","onSubmit","data","newMessageBody","placeholder","required","value","message","type","AddMessageFormik","initialValues","input","values","submitForm","isSubmitting","component","TextField","name","label","helperText","style","width","display","justifyContent","onClick","disabled","initialState","dataDialog","id","img","avatar","messages","dialogsReducer","state","action","body","dialogsActions","ResultCodesEnum","ResultCodeForCaptcha","useStyles","makeStyles","theme","drawer","drawerWidth","flexShrink","whiteSpace","drawerOpen","transition","transitions","create","easing","sharp","duration","enteringScreen","drawerClose","leavingScreen","overflowX","spacing","toolbar","alignItems","padding","mixins","DrawerComponent","handleDrawerClose","open","useTheme","classes","history","useHistory","Drawer","variant","className","clsx","paper","IconButton","direction","Divider","List","ListItem","button","push","ListItemIcon","ListItemText","primary","instance","axios","withCredentials","baseURL","headers","authAPI","get","then","response","email","password","rememberMe","captcha","post","res","delete","securityAPI","userId","login","isAuth","errorMessage","captchaUrl","undefined","actions","payload","getAuthUserData","dispatch","a","meData","resultCode","Success","getCaptchaUrl","url","Login","useState","setOpen","handleClose","Button","color","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","Typography","validate","test","Box","margin","FormControlLabel","control","Switch","src","alt","backgroundColor","DialogActions","LoginContainer","useSelector","auth","useDispatch","loginData","CaptchaIsRequired","root","appBar","zIndex","menuButton","marginRight","hide","title","marginLeft","cursor","empty","flexGrow","Header","logout","darkMode","setDarkMode","AppBar","position","Toolbar","edge","noWrap","mapDispatchToProps","connect","initialized","Preloader","LinearProgress","marginBottom","item","Welcome","Grid","container","sm","welcome","NotFound","ErrorBoundary","error","errorInfo","this","setState","console","log","props","children","React","Component","ProfileStatus","profile","status","updateUserStatus","isOwner","editMode","setEditMode","localStatus","setLocalStatus","useEffect","onChange","e","currentTarget","autoFocus","onBlur","defaultValue","onDoubleClick","ProfileDataForm","saveProfile","setErrors","defaultValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","catch","reject","map","elem","Object","keys","key","ProfileInfo","savePhoto","photos","large","goToEditMode","target","files","length","ProfileData","contactTitle","contactValue","Contact","profileAPI","put","photoFile","formData","FormData","append","posts","likesCount","newPostText","addPost","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","getUserProfile","info","marginTop","content","flexDirection","height","borderRadius","Post","Card","CardContent","align","MyPosts","profilePage","Profile","Paper","getUserStatus","file","getState","Error","Promise","authorizedUserId","useParams","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","portionNumber","setPortionNumber","pagesCount","Math","ceil","pages","Array","from","_","k","portionCount","leftPortionPageNumber","rightPortionPageNumber","filter","p","media","User","user","followingInProgress","follow","unfollow","CardActionArea","NavLink","to","CardMedia","image","gutterBottom","CardActions","followed","fullWidth","size","some","select","search","shape","fade","palette","common","white","breakpoints","up","searchIcon","pointerEvents","inputRoot","inputInput","paddingLeft","usersSearchFormValidate","UsersSearchForm","onFilterChanged","term","friend","setSubmitting","handleChange","touched","handleBlur","InputBase","inputProps","Select","MenuItem","updateObjectInArray","items","itemId","objPropName","newObjProps","i","usersAPI","users","totalUsersCount","isFetching","getUsersThunkCreator","page","totalCount","_followUnfollowFlow","apiMethod","actionCreator","getUsers","createSelector","usersPage","u","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","useStyle","flexWrap","cards","Users","memo","followThunk","unfollowThunk","index","UsersContainer","WrappedComponent","SuspendedDialogs","lazy","Suspense","fallback","initializeApp","app","createMuiTheme","main","secondary","preloader","ThemeProvider","CssBaseline","path","exact","ProfileContainer","rootReducer","combineReducers","newPost","dialogsPage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.0b50275d.chunk.js","sourcesContent":["import {useForm} from \"react-hook-form\";\r\nimport {Form, Formik, Field} from \"formik\";\r\nimport {Box, Button} from \"@material-ui/core\";\r\nimport {TextField} from \"formik-material-ui\";\r\nimport {FC} from \"react\";\r\n\r\ntype AddMessageFormPropsType = {\r\n    sendMessage: (text: string) => void\r\n    maxLength: number\r\n}\r\n\r\nexport const AddMessageForm: FC<AddMessageFormPropsType> = ({sendMessage, maxLength}) => {\r\n    const {register, handleSubmit, formState: {errors}} = useForm();\r\n\r\n    const onSubmit = (data: { newMessageBody: string }) => {\r\n        sendMessage(data.newMessageBody);\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div>\r\n                <div>\r\n                <textarea placeholder={\"Enter your message\"}\r\n                          {...register(\"newMessageBody\", ({\r\n                              required: \"Field is required\",\r\n                              maxLength: {value: maxLength, message: `Max length is ${maxLength} symbols`}\r\n                          }))}/>\r\n                </div>\r\n                {errors.newMessageBody && <span>{errors.newMessageBody.message}</span>}\r\n                <input type=\"submit\" value={\"Send\"}/>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\ntype AddMessageFormikPropsType = {\r\n    sendMessage: (text: string) => void\r\n}\r\n\r\nexport const AddMessageFormik: FC<AddMessageFormikPropsType> = ({sendMessage}) => {\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{input: \"\"}}\r\n            onSubmit={(values => sendMessage(values.input))}\r\n        >\r\n            {({submitForm, isSubmitting}) => (\r\n                <Form>\r\n                    <Box>\r\n                        <Field component={TextField} name={\"input\"} label={\"Add new post\"}\r\n                               helperText={\"Enter your message\"} style={{width: 250}}>\r\n                        </Field>\r\n                        <Box style={{display: \"flex\", justifyContent: \"flex-end\"}}>\r\n                            <Button onClick={submitForm} disabled={isSubmitting}>\r\n                                Send\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};","import avatar from \"../assets/images/avatar.svg\"\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\nexport type DialogsInitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    dataDialog: [\r\n        {id: 1, name: \"Dimych\", img: avatar},\r\n        {id: 2, name: \"Andrey\", img: avatar},\r\n        {id: 3, name: \"Sveta\", img: avatar},\r\n        {id: 4, name: \"Sasha\", img: avatar},\r\n        {id: 5, name: \"Victor\", img: avatar},\r\n        {id: 6, name: \"Valera\", img: avatar},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"},\r\n    ],\r\n};\r\n\r\nexport const dialogsReducer = (state = initialState, action: DialogsActionsTypes): DialogsInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SEND_MESSAGE\":\r\n            const body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}],\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport type DialogsActionsTypes = InferActionsTypes<typeof dialogsActions>\r\n\r\nexport const dialogsActions = {\r\n    sendMessage: (newMessageBody: string) => ({type: \"SEND_MESSAGE\", newMessageBody} as const)\r\n}","import axios from \"axios\";\r\nimport {UserType} from \"../types/typs\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"b45f20e6-c418-486d-bf45-21bf8191b135\"\r\n    },\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: UserType[]\r\n    totalCount: number\r\n    error?: string\r\n}\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: string[]\r\n    resultCode: RC\r\n}","import clsx from \"clsx\";\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {Drawer, List, Divider, ListItem, ListItemIcon, ListItemText, IconButton} from \"@material-ui/core\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport {drawerWidth} from \"./header\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport {FC} from \"react\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        whiteSpace: \"nowrap\",\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create(\"width\", {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerClose: {\r\n        transition: theme.transitions.create(\"width\", {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        overflowX: \"hidden\",\r\n        width: theme.spacing(7) + 1,\r\n    },\r\n    toolbar: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"flex-end\",\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n    },\r\n}));\r\n\r\ntype DrawerComponentPropsType = {\r\n    handleDrawerClose: () => void\r\n    open: boolean\r\n}\r\n\r\nexport const DrawerComponent: FC<DrawerComponentPropsType> = ({handleDrawerClose, open}) => {\r\n    const theme = useTheme();\r\n    const classes = useStyles(theme);\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Drawer\r\n            variant=\"permanent\"\r\n            className={clsx(classes.drawer, {\r\n                [classes.drawerOpen]: open,\r\n                [classes.drawerClose]: !open,\r\n            })}\r\n            classes={{\r\n                paper: clsx({\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                }),\r\n            }}\r\n        >\r\n            <div className={classes.toolbar}>\r\n                <IconButton onClick={handleDrawerClose}>\r\n                    {theme.direction === \"rtl\" ? <ChevronRightIcon/> : <ChevronLeftIcon/>}\r\n                </IconButton>\r\n            </div>\r\n            <Divider/>\r\n            <List>\r\n                <ListItem button onClick={() => history.push(\"/profile\")}>\r\n                    <ListItemIcon><AccountBoxIcon/></ListItemIcon>\r\n                    <ListItemText primary={\"Profile\"}/>\r\n                </ListItem>\r\n                <ListItem button onClick={() => history.push(\"/dialogs\")}>\r\n                    <ListItemIcon><QuestionAnswerIcon/></ListItemIcon>\r\n                    <ListItemText primary={\"Dialogs\"}/>\r\n                </ListItem>\r\n                <ListItem button onClick={() => history.push(\"/users\")}>\r\n                    <ListItemIcon><GroupIcon/></ListItemIcon>\r\n                    <ListItemText primary={\"Users\"}/>\r\n                </ListItem>\r\n            </List>\r\n        </Drawer>\r\n    );\r\n};","import {instance, APIResponseType, ResultCodeForCaptcha, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(response => response.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha?: string) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptcha>>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n};","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n    }\r\n}","import {ResultCodeForCaptcha, ResultCodesEnum} from \"../api/api\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    errorMessage: null as string | null,\r\n    captchaUrl: undefined as string | undefined, // if null, then captcha is not required\r\n};\r\n\r\nexport const authReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n        case \"GET_CAPTCHA_URL_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n\r\n        case \"SET_ERROR_LOGIN\":\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: \"SET_USER_DATA\", payload: {userId, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({type: \"GET_CAPTCHA_URL_SUCCESS\", payload: {captchaUrl}} as const),\r\n    setErrorLogin: (errorMessage: string) => ({type: \"SET_ERROR_LOGIN\", errorMessage} as const),\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    const meData = await authAPI.me();\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        const {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha?: string): ThunkType => async (dispatch) => {\r\n    authAPI.login(email, password, rememberMe, captcha)\r\n        .then(loginData => {\r\n                if (loginData.resultCode === ResultCodesEnum.Success) {\r\n                    // success, get auth data\r\n                    dispatch(getAuthUserData());\r\n                } else {\r\n                    if (loginData.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n                        dispatch(getCaptchaUrl());\r\n                    }\r\n                    dispatch(actions.setErrorLogin(loginData.messages[0]));\r\n                }\r\n            }\r\n        )\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    const response = await authAPI.logout();\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n};","import {\r\n    Button, Dialog, DialogActions, Box, FormControlLabel,\r\n    DialogContent, DialogTitle, Typography\r\n} from \"@material-ui/core\";\r\nimport {useState, FC} from \"react\";\r\nimport {Formik, Form, Field, FormikErrors} from \"formik\";\r\nimport {Switch, TextField} from \"formik-material-ui\";\r\n\r\ntype LoginType = {\r\n    errorMessage: string | null,\r\n    captchaUrl: string | undefined\r\n    onSubmit: (data: LoginValuesType) => void\r\n}\r\nexport type LoginValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string | undefined\r\n}\r\n\r\nexport const Login: FC<LoginType> = ({errorMessage, onSubmit, captchaUrl}) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"outlined\" color=\"secondary\" onClick={handleClickOpen}>\r\n                Login\r\n            </Button>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Login</DialogTitle>\r\n                <DialogContent>\r\n                    <Typography variant={\"subtitle1\"}>Please use test email: </Typography>\r\n                    <Typography variant={\"h4\"}>free@samuraijs.com</Typography>\r\n                    <Typography variant={\"subtitle1\"}>Please use test password: </Typography>\r\n                    <Typography variant={\"h4\"}>free</Typography>\r\n                    <Formik\r\n                        initialValues={{\r\n                            email: \"free@samuraijs.com\",\r\n                            password: \"free\",\r\n                            rememberMe: false,\r\n                            captcha: undefined as string | undefined,\r\n                        }}\r\n                        validate={(values: LoginValuesType) => {\r\n                            const errors: FormikErrors<LoginValuesType> = {};\r\n                            if (!values.email) {\r\n                                errors.email = 'Required';\r\n                            } else if (\r\n                                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n                            ) {\r\n                                errors.email = 'Invalid email address';\r\n                            }\r\n                            return errors;\r\n                        }}\r\n                        onSubmit={onSubmit}\r\n                    >\r\n                        <Form>\r\n                            <Box margin={1}>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    name={\"email\"}\r\n                                    type={\"email\"}\r\n                                    label={\"Email\"}\r\n                                    helperText={\"email\"}\r\n                                />\r\n                            </Box>\r\n                            <Box margin={1}>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    type=\"password\"\r\n                                    label=\"Password\"\r\n                                    name=\"password\"\r\n                                />\r\n                            </Box>\r\n                            <Box margin={1}>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Field component={Switch} type=\"checkbox\" name=\"rememberMe\"/>\r\n                                    }\r\n                                    label=\"Remember me\"\r\n                                />\r\n                            </Box>\r\n                            <Box margin={1}>\r\n                                {captchaUrl && <img style={{display: \"inherit\"}} src={captchaUrl} alt=\"captcha\"/>}\r\n                                {captchaUrl &&\r\n                                <Field\r\n                                    component={TextField}\r\n                                    type=\"captcha\"\r\n                                    label=\"Captcha\"\r\n                                    name=\"captcha\"\r\n                                />}\r\n                                {errorMessage && <Box margin={2}><Typography variant={\"subtitle1\"} style={{\r\n                                    color: \"red\",\r\n                                    backgroundColor: \"white\"\r\n                                }}>{errorMessage}</Typography></Box>}\r\n                            </Box>\r\n                            <DialogActions>\r\n                                <Button onClick={handleClose}>\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button type={\"submit\"}>\r\n                                    Login\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Form>\r\n                    </Formik>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n","import {useDispatch, useSelector} from \"react-redux\"\r\nimport {login} from \"../../redux/auth-reducer\"\r\nimport {Login, LoginValuesType} from \"./login\"\r\nimport {AppStateType} from \"../../redux/redux-store\"\r\n\r\nexport const LoginContainer = () => {\r\n\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n    const errorMessage = useSelector((state: AppStateType) => state.auth.errorMessage)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (data: LoginValuesType) => {\r\n        dispatch(login(data.email, data.password, data.rememberMe, data.captcha))\r\n    }\r\n\r\n    return (\r\n        <Login errorMessage={errorMessage} onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    )\r\n}","import {FC, useState} from \"react\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport {AppBar, Toolbar, Typography, IconButton, Button} from \"@material-ui/core\"\r\nimport MenuIcon from \"@material-ui/icons/Menu\"\r\nimport {DrawerComponent} from \"./drawerComponent\"\r\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\"\r\nimport CloseIcon from \"@material-ui/icons/Close\"\r\nimport {LoginContainer} from \"../login/loginContainer\"\r\nimport {HeaderContainerPropsType} from \"./headerContainer\"\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nexport const drawerWidth = 200\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    hide: {\r\n        display: \"none\",\r\n    },\r\n    toolbar: {\r\n        justifyContent: \"space-between\",\r\n    },\r\n    title: {\r\n        marginLeft: 20,\r\n        color: \"black\",\r\n        cursor: \"pointer\",\r\n    },\r\n    login: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n    },\r\n    empty: {\r\n        flexGrow: 1,\r\n    },\r\n    name: {\r\n        marginRight: 12,\r\n    },\r\n}))\r\n\r\n\r\nexport const Header: FC<HeaderContainerPropsType> = ({isAuth, login, logout, darkMode, setDarkMode}) => {\r\n    const classes = useStyles()\r\n    const [open, setOpen] = useState(false)\r\n    const history = useHistory()\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={classes.appBar}\r\n            >\r\n                <Toolbar className={classes.toolbar}>\r\n                    {open\r\n                        ? <IconButton onClick={handleDrawerClose} color={\"inherit\"} edge=\"start\">\r\n                            <CloseIcon/>\r\n                        </IconButton>\r\n                        : <IconButton color=\"inherit\" onClick={handleDrawerOpen} edge=\"start\">\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                    }\r\n                    <Typography onClick={() => history.push(\"/\")} variant=\"h6\" noWrap className={classes.title}>\r\n                        Social network\r\n                    </Typography>\r\n                    <div className={classes.empty}/>\r\n                    <div className={classes.login}>\r\n                        <IconButton color={\"secondary\"} onClick={() => setDarkMode(!darkMode)}>\r\n                            <Brightness4Icon/>\r\n                        </IconButton>\r\n                        <div>\r\n                            {isAuth\r\n                                ? <div className={classes.login}>\r\n                                    <Typography className={classes.name} variant={\"h6\"}>{login}</Typography>\r\n                                    <Button color={\"secondary\"} variant=\"outlined\" onClick={logout}>Log out</Button>\r\n                                </div>\r\n                                : <LoginContainer/>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <DrawerComponent open={open} handleDrawerClose={handleDrawerClose}/>\r\n        </div>\r\n    )\r\n}\r\n","import {Header} from \"./header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport React, {FC} from \"react\";\r\n\r\nexport type HeaderContainerPropsType = {\r\n    logout: () => void,\r\n    isAuth: boolean,\r\n    login: string | null,\r\n    darkMode: boolean,\r\n    setDarkMode: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nconst HeaderContainer: FC<HeaderContainerPropsType> = ({isAuth, login, logout, darkMode, setDarkMode}) => {\r\n    return (\r\n        <Header isAuth={isAuth} login={login} logout={logout} darkMode={darkMode} setDarkMode={setDarkMode}/>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    logout,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderContainer);","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nexport type AppInitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n};\r\n\r\nexport const appReducer = (state = initialState, action: ActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst actions = {\r\n    initializedSuccess: () => ({type: \"INITIALIZED_SUCCESS\"} as const),\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport const initializeApp = (): ThunkType => async (dispatch) => {\r\n    const promise = dispatch(getAuthUserData());\r\n    promise.then(() => {\r\n        dispatch(actions.initializedSuccess());\r\n    })\r\n};","import {LinearProgress} from \"@material-ui/core\";\r\nimport {useTheme} from \"@material-ui/core/styles\";\r\n\r\nexport const Preloader = () => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <LinearProgress style={{\r\n            backgroundColor: \"#303030\",\r\n            marginBottom: theme.spacing(2),\r\n        }}/>\r\n    );\r\n};","export default __webpack_public_path__ + \"static/media/login-key-flat-isometric_126523-1865.08ec80bf.jpg\";","import welcome from \"../../../assets/images/login-key-flat-isometric_126523-1865.jpg\"\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\"\r\nimport {Grid, Typography} from \"@material-ui/core\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    item: {\r\n        margin: theme.spacing(2),\r\n    },\r\n    img: {\r\n        width: \"100%\",\r\n    },\r\n}))\r\n\r\nexport const Welcome = () => {\r\n    const theme = useTheme()\r\n    const classes = useStyles(theme)\r\n\r\n    return (\r\n        <Grid container className={classes.root}>\r\n            <Grid item className={classes.item} sm={3}>\r\n                <img className={classes.img} src={welcome} alt=\"welcome\"/>\r\n            </Grid>\r\n            <Grid item className={classes.item} sm={8}>\r\n                <Typography variant={\"h4\"}>\r\n                    Добрый день!\r\n                </Typography>\r\n                <br/>\r\n                <Typography variant={\"h6\"}>\r\n                    Приветствую вас на моём презентационном сайте. Здесь предусмотренна авторизация пользователя через email и пароль.\r\n                    Но не беспокойтесь, регистрироваться не придётся, достаточно просто подтвердить уже введённые данные в Login форме.\r\n                    После этого вкладка Dialogs будет доступной (без входа произойдёт перенаправление на эту страницу).\r\n                    <br/>\r\n                    <br/>\r\n                    Кроме того, рядом с кнопкой Login, есть возможность сменить тему с тёмной на светлую.\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","\r\n\r\nexport const NotFound = () => {\r\n    return (\r\n        <div>Not Found</div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    state = {\r\n        error: false\r\n    };\r\n\r\n    componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n        this.setState({error: true});\r\n        console.log(errorInfo)\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <img src=\"https://miro.medium.com/max/700/1*v4dLIlWpJkCiSDKv7xguLA.png\" alt=\"error\"/>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}","import {Preloader} from \"../../common/preloader/preloader\";\r\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {ProfileType} from \"../../../../types/typs\";\r\n\r\ntype ProfileStatusType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean,\r\n}\r\n\r\nexport const ProfileStatus: React.FC<ProfileStatusType> = ({profile, status, updateUserStatus, isOwner}) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [localStatus, setLocalStatus] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        setLocalStatus(status);\r\n    }, [status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateUserStatus(localStatus as string);\r\n    };\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value);\r\n    };\r\n\r\n    if (!profile) return <Preloader/>;\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ? <div>\r\n                    <div>\r\n                        <b>Status: </b>\r\n                        <span onDoubleClick={isOwner ? () => activateEditMode() : undefined}>{localStatus || \"No status\"}</span>\r\n                    </div>\r\n\r\n                </div>\r\n                : <div>\r\n                    <input onChange={onChange}\r\n                           autoFocus={true} onBlur={() => deactivateEditMode()}\r\n                           type=\"text\" defaultValue={localStatus}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import {useForm} from \"react-hook-form\";\r\nimport React, {FC, useState} from \"react\";\r\nimport {ProfileType} from \"../../../../types/typs\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    setEditMode: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nexport const ProfileDataForm: FC<ProfileDataFormPropsType> = ({profile, saveProfile, setEditMode}) => {\r\n    const [errors, setErrors] = useState([]);\r\n    const {register, handleSubmit} = useForm({\r\n        defaultValues: {\r\n            fullName: profile.fullName,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            aboutMe: profile.aboutMe,\r\n            contacts: {\r\n                facebook: profile.contacts.facebook,\r\n                website: profile.contacts.website,\r\n                vk: profile.contacts.vk,\r\n                twitter: profile.contacts.twitter,\r\n                instagram: profile.contacts.instagram,\r\n                youtube: profile.contacts.youtube,\r\n                github: profile.contacts.github,\r\n                mainLink: profile.contacts.mainLink,\r\n            }\r\n        }\r\n    });\r\n    const onSubmit = (data: ProfileType) => {\r\n        saveProfile(data)\r\n            .then(() => setEditMode(false))\r\n            .catch(reject => setErrors(reject))\r\n\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div>\r\n                <div>\r\n                    <button>save</button>\r\n                </div>\r\n                {errors.map(elem =>\r\n                    <div key={elem}>\r\n                        {elem}\r\n                    </div>)\r\n                }\r\n                <div>\r\n                    <div>\r\n                        <b>Full name: </b>\r\n                        <div>\r\n                            <input type=\"text\" placeholder={\"Full name\"}{...register(\"fullName\")}/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <b>Looking for a job: </b>\r\n                        <div>\r\n                            <input type=\"checkbox\" {...register(\"lookingForAJob\")}/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <b>My professional skills: </b>\r\n                        <div>\r\n                            <textarea\r\n                                placeholder={\"My professional skills\"}{...register(\"lookingForAJobDescription\")}/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <b>About me: </b>\r\n                        <div>\r\n                            <textarea placeholder={\"About me\"}{...register(\"aboutMe\")}/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <b>Contacts: </b>\r\n                        <div>\r\n                            {\r\n                                Object.keys(profile.contacts)\r\n                                    .map(key =>\r\n                                        <div key={key}>\r\n                                            <b>{key}: </b>\r\n                                            <input type=\"text\"\r\n                                                   placeholder={key}{...register(`contacts.${key}` as any)}/>\r\n                                        </div>\r\n                                    )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};","import {Preloader} from \"../../common/preloader/preloader\";\r\nimport {ProfileStatus} from \"./profileStatus\";\r\nimport avatar from \"../../../../assets/images/avatar.svg\";\r\nimport {ChangeEvent, FC, useState} from \"react\";\r\nimport {ProfileDataForm} from \"./profileDataForm\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {ContactsType, ProfileType} from \"../../../../types/typs\";\r\n\r\ntype ProfileInfoTypes = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport const ProfileInfo: FC<ProfileInfoTypes> = ({\r\n                                profile,\r\n                                status,\r\n                                updateUserStatus,\r\n                                isOwner,\r\n                                savePhoto,\r\n                                saveProfile,\r\n                            }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    if (!profile) return <Preloader/>;\r\n    return (\r\n        <div>\r\n            <div >\r\n                <img  src={profile.photos.large || avatar} alt=\"img\"/>\r\n                {editMode\r\n                    ? <ProfileDataForm profile={profile} saveProfile={saveProfile} setEditMode={setEditMode}\r\n                    />\r\n                    : <ProfileData profile={profile} goToEditMode={() => setEditMode(true)} isOwner={isOwner}/>\r\n                }\r\n                <ProfileStatus profile={profile} status={status} updateUserStatus={updateUserStatus} isOwner={isOwner}/>\r\n            </div>\r\n            {isOwner && <input type={\"file\"} onChange={mainPhotoSelected}/>}\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ProfileDataTypes = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataTypes> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <button onClick={goToEditMode}>edit</button>}\r\n            <div>\r\n                <Typography variant={\"subtitle1\"}>Full name:</Typography>\r\n                <Typography variant={\"subtitle2\"}>{profile.fullName}</Typography>\r\n            </div>\r\n            <div>\r\n                <Typography variant={\"subtitle1\"}>Looking for a job:</Typography>\r\n                <Typography variant={\"subtitle2\"}>{profile.lookingForAJob ? \"yes\" : \"no\"}</Typography>\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <Typography variant={\"subtitle1\"}>My professional skills:</Typography>\r\n                <Typography variant={\"subtitle2\"}>{profile.lookingForAJobDescription}</Typography>\r\n            </div>\r\n            }\r\n            <div>\r\n                <Typography variant={\"subtitle1\"}>About me:</Typography>\r\n                <Typography variant={\"subtitle2\"}>{profile.aboutMe}</Typography>\r\n            </div>\r\n            <div>\r\n                <Typography variant={\"subtitle1\"}>Contacts:</Typography>\r\n                {\r\n                    Object.keys(profile.contacts)\r\n                        .map(key =>\r\n                            <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                        )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ContactsPropType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: FC<ContactsPropType> = ({contactTitle, contactValue}) => {\r\n    // if (!contactValue) return null\r\n    return (\r\n        <div >\r\n            <Typography variant={\"subtitle1\"}>{contactTitle}: </Typography>{contactValue}\r\n        </div>\r\n    );\r\n};","import {PhotosType, ProfileType} from \"../types/typs\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\r\n    }\r\n};","import {PhotosType, PostType, ProfileType} from \"../types/typs\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 11},\r\n        {id: 2, message: \"It's my first post\", likesCount: 22},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n    newPostText: \"\",\r\n};\r\n\r\nexport type ProfileInitialStateType = typeof initialState;\r\n\r\nexport const profileReducer = (state = initialState, action: ActionsType): ProfileInitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_POST\":\r\n            const newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n\r\n        case \"SET_USER_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n\r\n        case \"SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n\r\n        case \"DELETE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId),\r\n            };\r\n\r\n        case \"SAVE_PHOTO_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    photos: action.photos\r\n                } as ProfileType\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    addPost: (newPostText: string) => ({type: \"ADD_POST\", newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: \"SET_USER_PROFILE\", profile} as const),\r\n    setStatus: (status: string) => ({type: \"SET_STATUS\", status} as const),\r\n    deletePost: (postId: number) => ({type: \"DELETE_POST\", postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: \"SAVE_PHOTO_SUCCESS\", photos} as const),\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n};\r\n\r\nexport const getUserStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n};\r\n\r\nexport const updateUserStatus = (status: string): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n};\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n};\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const data = await profileAPI.saveProfile(profile);\r\n    if (data.resultCode === 0) {\r\n        if (userId !== null) {\r\n            await dispatch(getUserProfile(userId));\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        return Promise.reject(data.messages);\r\n    }\r\n};","import avatar from \"../../../../../assets/images/avatar.svg\"\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\r\nimport {FC} from \"react\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    info: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n        padding: theme.spacing(2),\r\n\r\n    },\r\n    content: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    img: {\r\n        height: \"100px\",\r\n        borderRadius: \"50%\",\r\n        marginBottom: theme.spacing(1),\r\n    }\r\n}));\r\n\r\ntype PostType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post: FC<PostType> = ({message, likesCount}) => {\r\n    const theme = useTheme();\r\n    const classes = useStyles(theme);\r\n\r\n    return (\r\n        <Card className={classes.info}>\r\n            <CardContent className={classes.content}>\r\n                <img className={classes.img} src={avatar} alt=\"avatar\"/>\r\n                <div>\r\n                    <Typography variant={\"body1\"} align={\"center\"}>\r\n                        {message}\r\n                    </Typography>\r\n                    <Typography variant={\"body2\"} align={\"left\"}>\r\n                        like: {likesCount}\r\n                    </Typography>\r\n                </div>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};","import {Post} from \"./posts/post\";\r\nimport {AddMessageFormik} from \"../../addMessageForm/addMessageForm\";\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\r\nimport {PostType} from \"../../../../types/typs\";\r\nimport {FC} from \"react\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    title: {\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n}));\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostType>,\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport const MyPosts: FC<MyPostsType> = ({posts, addPost}) => {\r\n    const theme = useTheme();\r\n    const classes = useStyles(theme);\r\n\r\n    return (\r\n        <div>\r\n            <Card >\r\n                <CardContent>\r\n                    <Typography className={classes.title} variant={\"h5\"}>My Posts</Typography>\r\n                    <AddMessageFormik sendMessage={addPost}/>\r\n                </CardContent>\r\n            </Card>\r\n            <div>\r\n                {\r\n                    posts.map(elem => <Post key={elem.id} message={elem.message} likesCount={elem.likesCount}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};","import {connect} from \"react-redux\";\r\nimport {actions} from \"../../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./myPosts\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport {PostType} from \"../../../../types/typs\";\r\nimport {FC} from \"react\";\r\n\r\ntype MyPostsContainerType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPostText: string) =>void\r\n}\r\n\r\nconst MyPostsContainer: FC<MyPostsContainerType> = ({posts, addPost}) => {\r\n    return (\r\n        <MyPosts posts={posts} addPost={addPost}/>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    addPost: actions.addPost\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPostsContainer);","import {ProfileInfo} from \"./profileInfo/profileInfo\";\r\nimport MyPostsContainer from \"./myPosts/myPostsContainer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {Preloader} from \"../common/preloader/preloader\";\r\nimport {ProfileType} from \"../../../types/typs\";\r\nimport {FC} from \"react\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    info: {\r\n        margin: theme.spacing(2),\r\n        padding: theme.spacing(2)\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(2),\r\n    }\r\n}));\r\n\r\ntype ProfilePropsTypes = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport const Profile: FC<ProfilePropsTypes> = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\r\n    const theme = useTheme();\r\n    const classes = useStyles(theme);\r\n\r\n    if (!profile) return <Preloader/>;\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item>\r\n                <Paper className={classes.info}>\r\n                    <ProfileInfo profile={profile} status={status} updateUserStatus={updateUserStatus} isOwner={isOwner}\r\n                                 savePhoto={savePhoto}\r\n                                 saveProfile={saveProfile}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item className={classes.paper}>\r\n                <MyPostsContainer/>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};","import {Profile} from \"./profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {FC, useEffect} from \"react\";\r\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from \"../../../redux/profile-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {ProfileType} from \"../../../types/typs\";\r\n\r\ntype ProfileContainerTypes = MapStateToPropsTypes & MapDispatchToPropsTypes\r\n\r\nconst ProfileContainer: FC<ProfileContainerTypes> = ({\r\n                              profile, status, authorizedUserId,\r\n                              getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile,\r\n                          }) => {\r\n\r\n    let userId = useParams<PathParamsType>().userId || authorizedUserId || 16528;\r\n\r\n    useEffect(() => {\r\n        getUserProfile(+userId);\r\n        getUserStatus(+userId);\r\n    }, [getUserStatus, getUserProfile, userId]);\r\n\r\n    return (\r\n        <Profile profile={profile} status={status} updateUserStatus={updateUserStatus}\r\n                 isOwner={userId === authorizedUserId} savePhoto={savePhoto}\r\n                 saveProfile={saveProfile}\r\n        />\r\n    );\r\n};\r\n\r\ntype MapStateToPropsTypes = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToPropsTypes = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileContainer);","import React, {useState} from \"react\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n    }\r\n})\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    portionSize?: number,\r\n}\r\n\r\nexport const Paginator: React.FC<PropsType> = ({\r\n                                               totalItemsCount,\r\n                                               pageSize,\r\n                                               currentPage,\r\n                                               onPageChanged,\r\n                                               portionSize = 10\r\n                                           }) => {\r\n    const [portionNumber, setPortionNumber] = useState(1);\r\n    const classes = useStyles()\r\n\r\n    const pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    const pages: number[] = Array.from({length: pagesCount}, (_, k) => k + 1);\r\n    const portionCount = Math.ceil(pagesCount / portionSize);\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    const rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {portionNumber > 1 &&\r\n            <div>\r\n                <IconButton onClick={() => {\r\n                    setPortionNumber(1)\r\n                }}>\r\n                    <FirstPageIcon/>\r\n                </IconButton>\r\n                <IconButton onClick={() => {\r\n                    setPortionNumber(portionNumber - 1)\r\n                }}>\r\n                    <NavigateBeforeIcon/>\r\n                </IconButton>\r\n            </div>\r\n            }\r\n            {\r\n                pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map(p => (p === currentPage)\r\n                        ? <Button key={p} variant={\"outlined\"}\r\n                                  onClick={() => onPageChanged(p)}\r\n                        >{p}</Button>\r\n                        : <Button key={p} onClick={() => onPageChanged(p)}>{p}</Button>\r\n                    )\r\n            }\r\n            {\r\n                portionCount > portionNumber &&\r\n                <>\r\n                    <IconButton onClick={() => {\r\n                        setPortionNumber(portionNumber + 1)\r\n                    }}>\r\n                        <NavigateNextIcon/>\r\n                    </IconButton>\r\n                    <IconButton onClick={() => {\r\n                        setPortionNumber(portionCount)\r\n                    }}>\r\n                        <LastPageIcon/>\r\n                    </IconButton>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n};","import {NavLink} from \"react-router-dom\";\r\nimport avatar from \"../../../assets/images/avatar.svg\";\r\nimport {Button, CardActions, Grid} from \"@material-ui/core\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {FC} from \"react\";\r\nimport {UserType} from \"../../../types/typs\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 270,\r\n        height: 370,\r\n        margin: \"8px\",\r\n    },\r\n    media: {\r\n        height: \"200px\",\r\n    },\r\n});\r\n\r\ntype UserPropsType = {\r\n    unfollow: (userId: number) => void,\r\n    follow: (userId: number) => void,\r\n    followingInProgress: number[],\r\n    user: UserType\r\n}\r\n\r\nexport const User: FC<UserPropsType> = ({user, followingInProgress, follow, unfollow}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid item>\r\n            <Card className={classes.root}>\r\n                <CardActionArea component={NavLink} to={`/profile/${user.id}`}>\r\n                    <CardMedia\r\n                        className={classes.media}\r\n                        image={user.photos.large ? user.photos.large : avatar}\r\n                        title={user.name}\r\n                    />\r\n                    <CardContent>\r\n                        <Typography noWrap gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Name:<br/>{user.name}\r\n                        </Typography>\r\n                        <Typography noWrap variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Status: {user.status || \"No status\"}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                    {user.followed\r\n                        ? <Button variant={\"contained\"} fullWidth size=\"small\"\r\n                                  disabled={followingInProgress.some(userId => userId === user.id)}\r\n                                  onClick={() => unfollow(user.id)}\r\n                        >Unfollow</Button>\r\n                        : <Button variant={\"contained\"} fullWidth size=\"small\"\r\n                                  disabled={followingInProgress.some(userId => userId === user.id)}\r\n                                  onClick={() => follow(user.id)}\r\n                        >Follow</Button>\r\n                    }\r\n                </CardActions>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n};","import {Form, Formik, Field, FormikHelpers} from \"formik\"\r\nimport {Button, InputBase, MenuItem} from \"@material-ui/core\"\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\nimport {fade, makeStyles, useTheme} from \"@material-ui/core/styles\"\r\nimport {FilterType} from \"../../../redux/users-reducer\"\r\nimport {FC} from \"react\"\r\nimport {Select} from \"formik-material-ui\"\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: theme.spacing(2),\r\n    },\r\n    select: {\r\n        width: 141\r\n    },\r\n    search: {\r\n        position: \"relative\",\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        \"&:hover\": {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginRight: theme.spacing(2),\r\n        marginLeft: 0,\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            marginLeft: theme.spacing(3),\r\n            width: \"auto\",\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: \"100%\",\r\n        position: \"absolute\",\r\n        pointerEvents: \"none\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    inputRoot: {\r\n        color: \"inherit\",\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create(\"width\"),\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: \"20ch\",\r\n        },\r\n    },\r\n}))\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    return {}\r\n}\r\n\r\ntype UsersSearchFormPropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\ntype FormType = {\r\n    term: string\r\n    friend: \"true\" | \"false\" | \"null\"\r\n}\r\n\r\nexport const UsersSearchForm: FC<UsersSearchFormPropsType> = ({onFilterChanged}) => {\r\n    const classes = useStyles(useTheme())\r\n\r\n    const onSubmit = (values: FormType, {setSubmitting}: FormikHelpers<FormType>) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false,\r\n        }\r\n        onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Formik\r\n                initialValues={{term: \"\", friend: \"null\"}}\r\n                onSubmit={onSubmit}\r\n                validate={usersSearchFormValidate}\r\n            >\r\n                {({\r\n                      values,\r\n                      errors,\r\n                      touched,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      handleSubmit,\r\n                      isSubmitting,\r\n                      /* and other goodies */\r\n                  }) => (\r\n                    <Form>\r\n                        <div className={classes.search}>\r\n                            <div className={classes.searchIcon}>\r\n                                <SearchIcon/>\r\n                            </div>\r\n                            <Field\r\n                                component={InputBase}\r\n                                placeholder=\"Search…\"\r\n                                classes={{\r\n                                    root: classes.inputRoot,\r\n                                    input: classes.inputInput,\r\n                                }}\r\n                                inputProps={{\"aria-label\": \"search\"}}\r\n                                id={\"term\"}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.term}\r\n                            />\r\n                            <Field\r\n                                className={classes.select}\r\n                                component={Select}\r\n                                type=\"text\"\r\n                                name=\"friend\"\r\n                                variant=\"standard\"\r\n                            >\r\n                                <MenuItem value={\"null\"}>All</MenuItem>\r\n                                <MenuItem value={\"true\"}>Only followed</MenuItem>\r\n                                <MenuItem value={\"false\"}>Only unfollowed</MenuItem>\r\n                            </Field>\r\n                            <Button type=\"submit\" disabled={isSubmitting}>\r\n                                Submit\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}","\r\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((i: any) => {\r\n        if (i[objPropName] === itemId) {\r\n            return {...i, ...newObjProps};\r\n        }\r\n        return i;\r\n    });\r\n};","import {GetItemsType, instance, APIResponseType} from \"./api\"\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10, term: string = \"\", friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`\r\n            + (friend === null ? \"\" : `&friend=${friend}`))\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<APIResponseType>(`follow/${userId}`).then(response => response.data)\r\n    },\r\n}","import {updateObjectInArray} from \"../utils/object-helpers\"\r\nimport {UserType} from \"../types/typs\"\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\"\r\nimport {Dispatch} from \"redux\"\r\nimport {usersAPI} from \"../api/users-api\"\r\nimport {APIResponseType} from \"../api/api\"\r\n\r\nconst initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as number[], // array of users ids\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as null | boolean\r\n    },\r\n}\r\n\r\nexport type UsersInitialState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\n\r\nexport const usersReducer = (state = initialState, action: ActionsTypes): UsersInitialState => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true}),\r\n            }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false}),\r\n            }\r\n\r\n        case \"SET_USERS\":\r\n            return {...state, users: action.users}\r\n\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case \"SET_TOTAL_USERS_COUNT\":\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n\r\n        case \"TOGGLE_IS_FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case \"SET_FILTER\":\r\n            return {...state, filter: action.payload}\r\n\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId),\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: \"FOLLOW\", userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: \"UNFOLLOW\", userId} as const),\r\n    setUsers: (users: UserType[]) => ({type: \"SET_USERS\", users} as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: \"SET_CURRENT_PAGE\",\r\n        currentPage,\r\n    } as const),\r\n    setFilter: (filter: FilterType) => ({\r\n        type: \"SET_FILTER\",\r\n        payload: filter,\r\n    } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: \"SET_TOTAL_USERS_COUNT\",\r\n        totalUsersCount,\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: \"TOGGLE_IS_FETCHING\",\r\n        isFetching,\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: \"TOGGLE_IS_FOLLOWING_PROGRESS\",\r\n        isFetching,\r\n        userId,\r\n    } as const),\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n\r\nexport const getUsersThunkCreator = (page: number, pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(page))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        const response = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(response.items))\r\n        dispatch(actions.setTotalUsersCount(response.totalCount))\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    const response = await apiMethod(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const followThunk = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow, actions.followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollowThunk = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow, actions.unfollowSuccess)\r\n    }\r\n}","import {createSelector} from \"reselect\"\r\nimport {AppStateType} from \"../redux-store\"\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n        return users.filter(u => true)\r\n    })\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}","import {Paginator} from \"../common/paginator/paginator\"\r\nimport {User} from \"./user\"\r\nimport {Grid} from \"@material-ui/core\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport React, {useEffect} from \"react\"\r\nimport {UsersSearchForm} from \"./usersSearchForm\"\r\nimport {FilterType, getUsersThunkCreator, followThunk, unfollowThunk} from \"../../../redux/users-reducer\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {\r\n    getCurrentPage, getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsers, getUsersFilter,\r\n} from \"../../../redux/selectors/usersSelectors\"\r\n\r\nconst useStyle = makeStyles({\r\n    root: {\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        flexWrap: \"wrap\",\r\n    },\r\n    cards: {\r\n        margin: 20,\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        justifyContent: \"center\",\r\n    },\r\n})\r\n\r\nexport const Users = React.memo(() => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const pageSize = useSelector(getPageSize)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersThunkCreator(currentPage, pageSize, filter))\r\n    }, [currentPage, dispatch, filter, pageSize])\r\n\r\n    const onPageChanged = (currentPage: number) => {\r\n        dispatch(getUsersThunkCreator(currentPage, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(getUsersThunkCreator(1, pageSize, filter))\r\n    }\r\n    const follow = (userId: number) => {\r\n        dispatch(followThunk(userId))\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollowThunk(userId))\r\n    }\r\n    const classes = useStyle()\r\n\r\n    return (\r\n        <Grid container className={classes.root}>\r\n            <Grid item>\r\n                <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            </Grid>\r\n            <Grid item>\r\n                <Paginator totalItemsCount={totalUsersCount} pageSize={pageSize} currentPage={currentPage}\r\n                           onPageChanged={onPageChanged}/>\r\n            </Grid>\r\n            <Grid item className={classes.cards}>\r\n                {\r\n                    users.map((user, index) => (\r\n                            <User key={index} user={user} followingInProgress={followingInProgress}\r\n                                  follow={follow} unfollow={unfollow}/>\r\n                        ),\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n})","import {useSelector} from \"react-redux\"\r\nimport {Users} from \"./users\"\r\nimport {Preloader} from \"../common/preloader/preloader\"\r\nimport {getIsFetching} from \"../../../redux/selectors/usersSelectors\"\r\n\r\nexport const UsersContainer = () => {\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return (\r\n        <>\r\n            {isFetching ? <Preloader/> : undefined}\r\n            <Users/>\r\n        </>\r\n    )\r\n}","import {FC, lazy, Suspense, useState} from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport HeaderContainer from \"../header/headerContainer\";\r\nimport {useEffect} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {initializeApp} from \"../../redux/app-reducer\";\r\nimport {Preloader} from \"../content/common/preloader/preloader\";\r\nimport {Welcome} from \"../content/welcome/welcome\";\r\nimport {NotFound} from \"../content/notFound/notFound\";\r\nimport ErrorBoundary from \"../content/errorBoundary/errorBoundary\";\r\nimport {ThemeProvider} from \"@material-ui/core/styles\";\r\nimport {CssBaseline, Grid} from \"@material-ui/core\";\r\nimport {createMuiTheme} from '@material-ui/core/styles';\r\nimport ProfileContainer from \"../content/profile/profileContainer\";\r\nimport {UsersContainer} from \"../content/users/usersContainer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withSuspense} from \"../../hoc/withSuspense\";\r\n\r\nconst DialogsContainer = lazy(() => import(\"../content/dialogs/dialogs-container\"));\r\n// redirect if you not authorized\r\nconst SuspendedDialogs = withSuspense(DialogsContainer);\r\n\r\nconst App: FC<MapStatePropsType & DispatchPropsType> = ({initialized, initializeApp}) => {\r\n    const [darkMode, setDarkMode] = useState(true);\r\n    useEffect(() => {\r\n        initializeApp();\r\n    }, [initializeApp]);\r\n\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            type: darkMode ? \"dark\" : \"light\",\r\n            primary: {\r\n                main: \"#FFFFFFFF\",\r\n            },\r\n            secondary: {\r\n                main: \"#000000FF\"\r\n            },\r\n        }\r\n    });\r\n\r\n    const preloader = (\r\n        <div className={\"app-wrapper\"}>\r\n            <Preloader/>\r\n        </div>\r\n    );\r\n\r\n    if (!initialized) return preloader;\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline/>\r\n            <Grid container direction={\"column\"}>\r\n                <ErrorBoundary>\r\n                    <Grid item>\r\n                        <HeaderContainer darkMode={darkMode} setDarkMode={setDarkMode}/>\r\n                    </Grid>\r\n                    <Grid item style={{margin: 56, padding: 24}}>\r\n                        <Suspense fallback={preloader}>\r\n                            <Switch>\r\n                                <Route path={\"/\"} exact component={Welcome}/>\r\n                                <Route path={\"/profile/:userId?\"} component={ProfileContainer}/>\r\n                                <Route path={\"/dialogs\"} component={SuspendedDialogs}/>\r\n                                <Route path={\"/users\"} component={UsersContainer}/>\r\n                                <Route component={NotFound}/>\r\n                            </Switch>\r\n                        </Suspense>\r\n                    </Grid>\r\n                </ErrorBoundary>\r\n            </Grid>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    initializeApp,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React, {ComponentType} from \"react\"\r\nimport {Preloader} from \"../components/content/common/preloader/preloader\";\r\n\r\nfunction withSuspense<WrappedComponentProps>(WrappedComponent: ComponentType<WrappedComponentProps>) {\r\n    return (props: WrappedComponentProps) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n\r\nexport {withSuspense};","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys: string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n});\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store =\r\n    createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app/app';\r\nimport {store} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <>\r\n        {/*HashRouter for github pages / BrowserRouter*/}\r\n        <HashRouter basename={process.env.PUBLIC_URL}>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </>,\r\n    document.getElementById('root')\r\n);","export default __webpack_public_path__ + \"static/media/avatar.4084d3ab.svg\";"],"sourceRoot":""}